@startuml

/' diagram meta data start
config=CallConfiguration;
{
  "rootMethod": "org.apache.nifi.logging.ComponentLog#isErrorEnabled()",
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showMethodParametersTypes": false,
    "showMethodParametersNames": false,
    "showMethodReturnType": false,
    "showPackageLevels": 2,
    "showCallOrder": false,
    "edgeMode": "MethodsOnly", // TypesOnly, MethodsOnly, TypesAndMethods, MethodsAndDirectTypeUsage
    "showDetailedClassStructure": false
  },
  "rootClass": "org.apache.nifi.logging.ComponentLog"
}
diagram meta data end '/



digraph g {
    rankdir="LR"
    splines=polyline
    

'nodes 
subgraph cluster_1411517106 { 
   	label=apache
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_781648802 { 
   	label=nifi
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   subgraph cluster_1144416029 { 
   	label=DebugFlow
	labeljust=l
	fillcolor=white
	style=filled
   
   DebugFlow470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="DebugFlow

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1333728902 { 
   	label=AbstractProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractProcessor786985848XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractProcessor

null"
	fontcolor=darkgreen
];

AbstractProcessor786985848XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractProcessor

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1865804362 { 
   	label=LogAttribute
	labeljust=l
	fillcolor=white
	style=filled
   
   LogAttribute470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="LogAttribute

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1921211216 { 
   	label=ComponentLog
	labeljust=l
	fillcolor=white
	style=filled
   
   ComponentLog978875333XXXisErrorEnabled0[
	label="+ isErrorEnabled()"
	style=filled
	fillcolor=white
	tooltip="ComponentLog

null"
	penwidth=4
	fontcolor=darkgreen
];
} 

subgraph cluster_320771679 { 
   	label=LogMessage
	labeljust=l
	fillcolor=white
	style=filled
   
   LogMessage470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="LogMessage

null"
	fontcolor=darkgreen
];
} 
} 
} 

'edges    
AbstractProcessor786985848XXXonTrigger1421322213 -> DebugFlow470851760XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> LogAttribute470851760XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> LogMessage470851760XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger302525551 -> AbstractProcessor786985848XXXonTrigger1421322213;
DebugFlow470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXisErrorEnabled0;
LogAttribute470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXisErrorEnabled0;
LogMessage470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXisErrorEnabled0;
    
}
@enduml