@startuml

/' diagram meta data start
config=CallConfiguration;
{
  "rootMethod": "org.apache.nifi.logging.ComponentLog#error(String)",
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showMethodParametersTypes": false,
    "showMethodParametersNames": false,
    "showMethodReturnType": false,
    "showPackageLevels": 2,
    "showCallOrder": false,
    "edgeMode": "MethodsOnly", // TypesOnly, MethodsOnly, TypesAndMethods, MethodsAndDirectTypeUsage
    "showDetailedClassStructure": false
  },
  "rootClass": "org.apache.nifi.logging.ComponentLog"
}
diagram meta data end '/



digraph g {
    rankdir="LR"
    splines=polyline
    

'nodes 
subgraph cluster_109642426 { 
   	label=speyk
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1357476466 { 
   	label=nifi
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   subgraph cluster_919407401 { 
   	label=InvokeMicrosoftGraphCalendar
	labeljust=l
	fillcolor=white
	style=filled
   
   InvokeMicrosoftGraphCalendar652418931XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="InvokeMicrosoftGraphCalendar

null"
	fontcolor=darkgreen
];
} 
} 
} 

subgraph cluster_1411517106 { 
   	label=apache
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_781648802 { 
   	label=nifi
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   subgraph cluster_1002388900 { 
   	label=PublishMQTT
	labeljust=l
	fillcolor=white
	style=filled
   
   PublishMQTT1617610039XXXmessageArrived477200798[
	label="+ messageArrived()"
	style=filled
	fillcolor=white
	tooltip="PublishMQTT

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1008684560 { 
   	label=StandardProcessSession
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardProcessSession1624409406XXXcommit0[
	label="+ commit()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessSession

&#10;  \<p\>&#10;  Commits the current session ensuring all operations against FlowFiles&#10;  within this session are atomically persisted. All FlowFiles operated on&#10;  within this session must be accounted for by transfer or removal or the&#10;  commit will fail.\</p\>&#10; &#10;  \<p\>&#10;  As soon as the commit completes the session is again ready to be used\</p\>&#10; &#10;  @throws IllegalStateException if detected that this method is being&#10;  called from within a callback of another method in this session.&#10;  @throws FlowFileHandlingException if not all FlowFiles acted upon within&#10;  this session are accounted for by user code such that they have a&#10;  transfer identified or where marked for removal. Automated rollback&#10;  occurs.&#10;  @throws ProcessException if some general fault occurs while persisting&#10;  the session. Initiates automatic rollback. The root cause can be obtained&#10;  via \<code\>Exception.getCause()\</code\>&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1012720292 { 
   	label=PutS3Object
	labeljust=l
	fillcolor=white
	style=filled
   
   PutS3Object593015804XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutS3Object

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1027819318 { 
   	label=DeleteGridFS
	labeljust=l
	fillcolor=white
	style=filled
   
   DeleteGridFS1775368734XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="DeleteGridFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1031303832 { 
   	label=ProvenanceEnumerator
	labeljust=l
	fillcolor=white
	style=filled
   
   ProvenanceEnumerator2089535909XXXmoveNext0[
	label="+ moveNext()"
	style=filled
	fillcolor=white
	tooltip="ProvenanceEnumerator

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1056207276 { 
   	label=ConvertCSVToAvro
	labeljust=l
	fillcolor=white
	style=filled
   
   ConvertCSVToAvro1617542754XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConvertCSVToAvro

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1056794268 { 
   	label=GetDynamoDB
	labeljust=l
	fillcolor=white
	style=filled
   
   GetDynamoDB761724532XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetDynamoDB

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1062827759 { 
   	label=UpdateAttribute
	labeljust=l
	fillcolor=white
	style=filled
   
   UpdateAttribute173150506XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="UpdateAttribute

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1080114859 { 
   	label=PutDynamoDB
	labeljust=l
	fillcolor=white
	style=filled
   
   PutDynamoDB761724532XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutDynamoDB

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1084483878 { 
   	label=ConvertAvroSchema
	labeljust=l
	fillcolor=white
	style=filled
   
   ConvertAvroSchema1617542754XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConvertAvroSchema

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1102050982 { 
   	label=PutAzureCosmosDBRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   PutAzureCosmosDBRecord717846349XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutAzureCosmosDBRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1109842081 { 
   	label=ExecuteSparkInteractive
	labeljust=l
	fillcolor=white
	style=filled
   
   ExecuteSparkInteractive1617572627XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ExecuteSparkInteractive

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1148505867 { 
   	label=GetRethinkDB
	labeljust=l
	fillcolor=white
	style=filled
   
   GetRethinkDB760475350XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetRethinkDB

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1168333884 { 
   	label=PublishKafkaRecord_2_0
	labeljust=l
	fillcolor=white
	style=filled
   
   PublishKafkaRecord_2_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PublishKafkaRecord_2_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1168333890 { 
   	label=PublishKafkaRecord_2_6
	labeljust=l
	fillcolor=white
	style=filled
   
   PublishKafkaRecord_2_61914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PublishKafkaRecord_2_6

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1188361006 { 
   	label=PutSlack
	labeljust=l
	fillcolor=white
	style=filled
   
   PutSlack1388322851XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutSlack

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1212228912 { 
   	label=PutTCP
	labeljust=l
	fillcolor=white
	style=filled
   
   PutTCP470851760XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutTCP

&#10;  event handler method to handle the FlowFile being forwarded to the Processor by the framework. The FlowFile contents is sent out over a TCP connection using an acquired ChannelSender object. If&#10;  the FlowFile contents was sent out successfully then the FlowFile is forwarded to the success relationship. If an error occurred then the FlowFile is forwarded to the failure relationship.&#10; &#10;  @param context&#10; - the current process context.&#10; &#10;  @param sessionFactory&#10; - a factory object to obtain a process session.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1247101897 { 
   	label=ExtractCCDAAttributes
	labeljust=l
	fillcolor=white
	style=filled
   
   ExtractCCDAAttributes1617298160XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ExtractCCDAAttributes

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1250081110 { 
   	label=PutGridFS
	labeljust=l
	fillcolor=white
	style=filled
   
   PutGridFS1775368734XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutGridFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1250929481 { 
   	label=SimpleProcessLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   SimpleProcessLogger786985848XXXdebug1808118735[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="SimpleProcessLogger

null"
	fontcolor=darkgreen
];

SimpleProcessLogger786985848XXXerror1808118735[
	label="+ error()"
	style=filled
	fillcolor=white
	tooltip="SimpleProcessLogger

null"
	fontcolor=darkgreen
];

SimpleProcessLogger786985848XXXerror424332965[
	label="+ error()"
	style=filled
	fillcolor=white
	tooltip="SimpleProcessLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1253604765 { 
   	label=PutElasticsearchRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   PutElasticsearchRecord466089974XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutElasticsearchRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1257559985 { 
   	label=AbstractPutHDFSRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractPutHDFSRecord413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractPutHDFSRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1269979517 { 
   	label=StatelessFlowManager
	labeljust=l
	fillcolor=white
	style=filled
   
   StatelessFlowManager395280032XXXcreateControllerService376068543[
	label="+ createControllerService()"
	style=filled
	fillcolor=white
	tooltip="StatelessFlowManager

null"
	fontcolor=darkgreen
];

StatelessFlowManager395280032XXXcreateProcessor376068543[
	label="+ createProcessor()"
	style=filled
	fillcolor=white
	tooltip="StatelessFlowManager

&#10;  \<p\>&#10;  Creates a new ProcessorNode with the given type and identifier and&#10;  optionally initializes it.&#10;  \</p\>&#10; &#10;  @param type the fully qualified Processor class name&#10;  @param id the unique ID of the Processor&#10;  @param coordinate the bundle coordinate for this processor&#10;  @param firstTimeAdded whether or not this is the first time this&#10;  Processor is added to the graph. If {@code true}, will invoke methods&#10;  annotated with the {@link org.apache.nifi.annotation.lifecycle.OnAdded} annotation.&#10;  @return new processor node&#10;  @throws NullPointerException if either arg is null&#10; "
	fontcolor=darkgreen
];

StatelessFlowManager395280032XXXcreateReportingTask376068543[
	label="+ createReportingTask()"
	style=filled
	fillcolor=white
	tooltip="StatelessFlowManager

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1314456639 { 
   	label=FetchGridFS
	labeljust=l
	fillcolor=white
	style=filled
   
   FetchGridFS1775368734XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="FetchGridFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1316988765 { 
   	label=PutDatabaseRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   PutDatabaseRecord470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutDatabaseRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1319608814 { 
   	label=ConsumeKafkaRecord_1_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_1_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_1_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1319609775 { 
   	label=ConsumeKafkaRecord_2_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_2_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_2_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1319609781 { 
   	label=ConsumeKafkaRecord_2_6
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_2_61914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_2_6

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1333728902 { 
   	label=AbstractProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractProcessor786985848XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractProcessor

null"
	fontcolor=darkgreen
];

AbstractProcessor786985848XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractProcessor

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1360976633 { 
   	label=AbstractJMSProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractJMSProcessor80226329XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractJMSProcessor

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_137450155 { 
   	label=StandardProcessScheduler
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardProcessScheduler32703756XXXschedule1665165653[
	label="+ schedule()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessScheduler

&#10;  Begins scheduling the given Reporting Task to run&#10; &#10;  @param taskNode to schedule&#10; "
	fontcolor=darkgreen
];

StandardProcessScheduler32703756XXXshutdownControllerService1166560357[
	label="+ shutdownControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessScheduler

null"
	fontcolor=darkgreen
];

StandardProcessScheduler32703756XXXshutdownReportingTask1665165653[
	label="+ shutdownReportingTask()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessScheduler

null"
	fontcolor=darkgreen
];

StandardProcessScheduler32703756XXXstopFunnel2115478486[
	label="+ stopFunnel()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessScheduler

&#10;  Stops scheduling the given Funnel to run. This does not interrupt any&#10;  threads that are currently running within the given funnel. If the funnel&#10;  is not scheduled to run, does nothing.&#10; &#10;  @param funnel to stop&#10; "
	fontcolor=darkgreen
];

StandardProcessScheduler32703756XXXstopPort2493601[
	label="+ stopPort()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessScheduler

&#10;  Stops scheduling the given Port to run. This does not interrupt any&#10;  threads that are currently running within the given port. This does not&#10;  interrupt any threads that are currently running within the given Port.&#10;  If the Port is not scheduled to run, does nothing.&#10; &#10;  @param port to stop&#10; "
	fontcolor=darkgreen
];

StandardProcessScheduler32703756XXXunschedule1665165653[
	label="+ unschedule()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessScheduler

&#10;  Stops scheduling the given Reporting Task to run&#10; &#10;  @param taskNode to unschedule&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1377188756 { 
   	label=CreateHadoopSequenceFile
	labeljust=l
	fillcolor=white
	style=filled
   
   CreateHadoopSequenceFile413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="CreateHadoopSequenceFile

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1390069193 { 
   	label=AbstractKafkaProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractKafkaProcessor1396033677XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractKafkaProcessor

&#10; &#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1397241850 { 
   	label=DeleteMongo
	labeljust=l
	fillcolor=white
	style=filled
   
   DeleteMongo624533887XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="DeleteMongo

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_140632371 { 
   	label=SiteToSiteMetricsReportingTask
	labeljust=l
	fillcolor=white
	style=filled
   
   SiteToSiteMetricsReportingTask1528425748XXXonTrigger602840001[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="SiteToSiteMetricsReportingTask

&#10;  This method is called on a scheduled interval to allow the Reporting Task&#10;  to perform its tasks.&#10; &#10;  @param context reporting context&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1413015282 { 
   	label=DeleteRethinkDB
	labeljust=l
	fillcolor=white
	style=filled
   
   DeleteRethinkDB760475350XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="DeleteRethinkDB

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1428071880 { 
   	label=ReportingTaskWrapper
	labeljust=l
	fillcolor=white
	style=filled
   
   ReportingTaskWrapper1248989462XXXrun0[
	label="+ run()"
	style=filled
	fillcolor=white
	tooltip="ReportingTaskWrapper

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1452532810 { 
   	label=AttributesToCSV
	labeljust=l
	fillcolor=white
	style=filled
   
   AttributesToCSV470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AttributesToCSV

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1466911714 { 
   	label=ListenSMTP
	labeljust=l
	fillcolor=white
	style=filled
   
   ListenSMTP1401222167XXXstop0[
	label="+ stop()"
	style=filled
	fillcolor=white
	tooltip="ListenSMTP

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1473951613 { 
   	label=AbstractDeleteHBase
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractDeleteHBase886316319XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractDeleteHBase

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_150470145 { 
   	label=GetSplunk
	labeljust=l
	fillcolor=white
	style=filled
   
   GetSplunk84296138XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetSplunk

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1534396166 { 
   	label=NopComponentLog
	labeljust=l
	fillcolor=white
	style=filled
   
   NopComponentLog832281502XXXdebug1808118735[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="NopComponentLog

null"
	fontcolor=darkgreen
];

NopComponentLog832281502XXXerror1808118735[
	label="+ error()"
	style=filled
	fillcolor=white
	tooltip="NopComponentLog

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1630245760 { 
   	label=InvokeScriptedProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   InvokeScriptedProcessor96134626XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="InvokeScriptedProcessor

&#10;  Invokes the onTrigger() method of the scripted processor. If the script&#10;  failed to reload, the processor yields until the script can be reloaded&#10;  successfully. If the scripted processor's onTrigger() method throws an&#10;  exception, a ProcessException will be thrown. If no processor is defined&#10;  by the script, an error is logged with the system.&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSessionFactory},&#10;  which can be used for accessing FlowFiles, etc.&#10;  @throws ProcessException if the scripted processor's onTrigger() method&#10;  throws an exception&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1637313692 { 
   	label=EventQueue
	labeljust=l
	fillcolor=white
	style=filled
   
   EventQueue461065943XXXoffer69[
	label="+ offer()"
	style=filled
	fillcolor=white
	tooltip="EventQueue

&#10;  Offers the given event to the events queue with a wait time, if the offer fails the event&#10;  is dropped an error is logged.&#10; &#10;  @param event the event to offer&#10;  @throws InterruptedException if interrupted while waiting to offer&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1669507447 { 
   	label=DatabaseRecordSink
	labeljust=l
	fillcolor=white
	style=filled
   
   DatabaseRecordSink1272331786XXXsendData1493945457[
	label="+ sendData()"
	style=filled
	fillcolor=white
	tooltip="DatabaseRecordSink

&#10;  Sends the record set to the RecordSinkService&#10;  @param recordSet The RecordSet to transmit&#10;  @param attributes Attributes associated with the RecordSet&#10;  @param sendZeroResults Whether to transmit empty record sets&#10;  @return a WriteResult object containing the number of records transmitted, as well as any metadata in the form of attributes&#10;  @throws IOException if any error occurs during transmission of the record set&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1684153142 { 
   	label=StandardLogRepository
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardLogRepository1292167443XXXaddLogMessage907761562[
	label="+ addLogMessage()"
	style=filled
	fillcolor=white
	tooltip="StandardLogRepository

null"
	fontcolor=darkgreen
];

StandardLogRepository1292167443XXXaddLogMessage936633774[
	label="+ addLogMessage()"
	style=filled
	fillcolor=white
	tooltip="StandardLogRepository

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1708012223 { 
   	label=CapturingLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   CapturingLogger306090332XXXdebug658265366[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="CapturingLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1708388606 { 
   	label=FlowController
	labeljust=l
	fillcolor=white
	style=filled
   
   FlowController1158014602XXXinitializeFlow1485893118[
	label="+ initializeFlow()"
	style=filled
	fillcolor=white
	tooltip="FlowController

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_173089348 { 
   	label=LumberjackFrameHandler
	labeljust=l
	fillcolor=white
	style=filled
   
   LumberjackFrameHandler1185999207XXXhandle255842137[
	label="+ handle()"
	style=filled
	fillcolor=white
	tooltip="LumberjackFrameHandler

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1742318096 { 
   	label=MoveHDFS
	labeljust=l
	fillcolor=white
	style=filled
   
   MoveHDFS413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="MoveHDFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1744524300 { 
   	label=SiteToSiteUtils
	labeljust=l
	fillcolor=white
	style=filled
   
   SiteToSiteUtils864805466XXXgetClient2136060475[
	label="+ getClient()"
	style=filled
	fillcolor=white
	tooltip="SiteToSiteUtils

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1752160180 { 
   	label=PutInfluxDB
	labeljust=l
	fillcolor=white
	style=filled
   
   PutInfluxDB1607313889XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutInfluxDB

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1755905334 { 
   	label=EventDrivenTask
	labeljust=l
	fillcolor=white
	style=filled
   
   EventDrivenTask1117794091XXXrun0[
	label="+ run()"
	style=filled
	fillcolor=white
	tooltip="EventDrivenTask

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1844940853 { 
   	label=MonitorActivity
	labeljust=l
	fillcolor=white
	style=filled
   
   MonitorActivity470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="MonitorActivity

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1857245807 { 
   	label=PublishKafka_2_6
	labeljust=l
	fillcolor=white
	style=filled
   
   PublishKafka_2_61914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PublishKafka_2_6

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1857245813 { 
   	label=PublishKafka_2_0
	labeljust=l
	fillcolor=white
	style=filled
   
   PublishKafka_2_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PublishKafka_2_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1862046378 { 
   	label=PutKudu
	labeljust=l
	fillcolor=white
	style=filled
   
   PutKudu1617553806XXXonScheduled135384992[
	label="+ onScheduled()"
	style=filled
	fillcolor=white
	tooltip="PutKudu

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1863501435 { 
   	label=AbstractCassandraProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractCassandraProcessor1620253589XXXonScheduled135384992[
	label="+ onScheduled()"
	style=filled
	fillcolor=white
	tooltip="AbstractCassandraProcessor

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1865804362 { 
   	label=LogAttribute
	labeljust=l
	fillcolor=white
	style=filled
   
   LogAttribute470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="LogAttribute

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1872299668 { 
   	label=ReflectionUtils
	labeljust=l
	fillcolor=white
	style=filled
   
   ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571[
	label="+ invokeMethodsWithAnnotation()"
	style=filled
	fillcolor=white
	tooltip="ReflectionUtils

&#10;  Invokes all methods on the given instance that have been annotated with the given Annotation. If the signature of the method that is defined in \<code\>instance\</code\> uses 1 or more parameters,&#10;  those parameters must be specified by the \<code\>args\</code\> parameter. However, if more arguments are supplied by the \<code\>args\</code\> parameter than needed, the extra arguments will be&#10;  ignored.&#10; &#10;  @param annotation annotation&#10;  @param instance instance&#10;  @param args args&#10;  @throws InvocationTargetException ex&#10;  @throws IllegalArgumentException ex&#10;  @throws IllegalAccessException ex&#10; "
	fontcolor=darkgreen
];

ReflectionUtils306090332XXXinvokeMethodsWithAnnotations1136223332[
	label="+ invokeMethodsWithAnnotations()"
	style=filled
	fillcolor=white
	tooltip="ReflectionUtils

&#10;  Invokes all methods on the given instance that have been annotated with the given preferredAnnotation and if no such method exists will invoke all methods on the given instance that have been&#10;  annotated with the given alternateAnnotation, if any exists. If the signature of the method that is defined in \<code\>instance\</code\> uses 1 or more parameters, those parameters must be&#10;  specified by the \<code\>args\</code\> parameter. However, if more arguments are supplied by the \<code\>args\</code\> parameter than needed, the extra arguments will be ignored.&#10; &#10;  @param preferredAnnotation preferred&#10;  @param alternateAnnotation alternate&#10;  @param instance instance&#10;  @param args args&#10;  @throws InvocationTargetException ex&#10;  @throws IllegalArgumentException ex&#10;  @throws IllegalAccessException ex&#10; "
	fontcolor=darkgreen
];

ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571[
	label="+ quietlyInvokeMethodsWithAnnotation()"
	style=filled
	fillcolor=white
	tooltip="ReflectionUtils

&#10;  Invokes all methods on the given instance that have been annotated with the given Annotation. If the signature of the method that is defined in \<code\>instance\</code\> uses 1 or more parameters,&#10;  those parameters must be specified by the \<code\>args\</code\> parameter. However, if more arguments are supplied by the \<code\>args\</code\> parameter than needed, the extra arguments will be&#10;  ignored.&#10; &#10;  @param annotation annotation&#10;  @param instance instance&#10;  @param args args&#10;  @return \<code\>true\</code\> if all appropriate methods were invoked and returned without throwing an Exception, \<code\>false\</code\> if one of the methods threw an Exception or could not be&#10;  invoked; if \<code\>false\</code\> is returned, an error will have been logged.&#10; "
	fontcolor=darkgreen
];

ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation285050154[
	label="+ quietlyInvokeMethodsWithAnnotation()"
	style=filled
	fillcolor=white
	tooltip="ReflectionUtils

&#10;  Invokes all methods on the given instance that have been annotated with the given Annotation. If the signature of the method that is defined in \<code\>instance\</code\> uses 1 or more parameters,&#10;  those parameters must be specified by the \<code\>args\</code\> parameter. However, if more arguments are supplied by the \<code\>args\</code\> parameter than needed, the extra arguments will be&#10;  ignored.&#10; &#10;  @param annotation annotation&#10;  @param instance instance&#10;  @param logger logger&#10;  @param args args&#10;  @return \<code\>true\</code\> if all appropriate methods were invoked and returned without throwing an Exception, \<code\>false\</code\> if one of the methods threw an Exception or could not be&#10;  invoked; if \<code\>false\</code\> is returned, an error will have been logged.&#10; "
	fontcolor=darkgreen
];

ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotations1136223332[
	label="+ quietlyInvokeMethodsWithAnnotations()"
	style=filled
	fillcolor=white
	tooltip="ReflectionUtils

&#10;  Invokes all methods on the given instance that have been annotated with the given preferredAnnotation and if no such method exists will invoke all methods on the given instance that have been&#10;  annotated with the given alternateAnnotation, if any exists. If the signature of the method that is defined in \<code\>instance\</code\> uses 1 or more parameters, those parameters must be&#10;  specified by the \<code\>args\</code\> parameter. However, if more arguments are supplied by the \<code\>args\</code\> parameter than needed, the extra arguments will be ignored.&#10; &#10;  @param preferredAnnotation preferred&#10;  @param alternateAnnotation alternate&#10;  @param instance instance&#10;  @param args args&#10;  @return \<code\>true\</code\> if all appropriate methods were invoked and returned without throwing an Exception, \<code\>false\</code\> if one of the methods threw an Exception or could not be&#10;  invoked; if \<code\>false\</code\> is returned, an error will have been logged.&#10; "
	fontcolor=darkgreen
];

ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotations53280159[
	label="+ quietlyInvokeMethodsWithAnnotations()"
	style=filled
	fillcolor=white
	tooltip="ReflectionUtils

&#10;  Invokes all methods on the given instance that have been annotated with&#10;  the given preferredAnnotation and if no such method exists will invoke&#10;  all methods on the given instance that have been annotated with the given&#10;  alternateAnnotation, if any exists. If the signature of the method that&#10;  is defined in \<code\>instance\</code\> uses 1 or more parameters, those&#10;  parameters must be specified by the \<code\>args\</code\> parameter. However,&#10;  if more arguments are supplied by the \<code\>args\</code\> parameter than&#10;  needed, the extra arguments will be ignored.&#10; &#10;  @param preferredAnnotation preferred&#10;  @param alternateAnnotation alternate&#10;  @param instance instance&#10;  @param logger the ComponentLog to use for logging any errors. If null, will&#10; use own logger, but that will not generate bulletins or easily&#10; tie to the Processor's log messages.&#10;  @param args args&#10;  @return \<code\>true\</code\> if all appropriate methods were invoked and&#10;  returned without throwing an Exception, \<code\>false\</code\> if one&#10;  of the methods threw an Exception or could not be invoked; if&#10;  \<code\>false\</code\> is returned, an error will have been logged.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1887393631 { 
   	label=StandardProcessorNode
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardProcessorNode1158014602XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorNode

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. This method may be called concurrently from different&#10;  threads. When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  \<p\>&#10;  The processor may commit, roll back, or allow the framework to&#10;  automatically manage the session. If the sessions are to be managed by&#10;  the framework (recommended) then what it will do depends on several&#10;  factors. If the method call returns due to an exception then the session&#10;  will be rolled back. If the method returns normally then the session will&#10;  be committed or the framework may use the session again for another&#10;  processor down stream\</p\>&#10; &#10;  @param context in which the component is triggered&#10;  @param sessionFactory used to generate {@link ProcessSession}s to use for&#10;  operating on flow files within the repository&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];

StandardProcessorNode1158014602XXXstart1438961993[
	label="+ start()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorNode

&#10;  Will idempotently start the processor using the following sequence: \<i\>&#10;  \<ul\>&#10;  \<li\>Validate Processor's state (e.g., PropertyDescriptors,&#10;  ControllerServices etc.)\</li\>&#10;  \<li\>Transition (atomically) Processor's scheduled state form STOPPED to&#10;  STARTING. If the above state transition succeeds, then execute the start&#10;  task (asynchronously) which will be re-tried until @OnScheduled is&#10;  executed successfully and \"schedulingAgentCallback' is invoked, or until&#10;  STOP operation is initiated on this processor. If state transition fails&#10;  it means processor is already being started and WARN message will be&#10;  logged explaining it.\</li\>&#10;  \</ul\>&#10;  \</i\>&#10;  \<p\>&#10;  Any exception thrown while invoking operations annotated with @OnSchedule&#10;  will be caught and logged after which @OnUnscheduled operation will be&#10;  invoked (quietly) and the start sequence will be repeated (re-try) after&#10;  delay provided by 'administrativeYieldMillis'.&#10;  \</p\>&#10;  \<p\>&#10;  Upon successful completion of start sequence (@OnScheduled -&gt;&#10;  'schedulingAgentCallback') the attempt will be made to transition&#10;  processor's scheduling state to RUNNING at which point processor is&#10;  considered to be fully started and functioning. If upon successful&#10;  invocation of @OnScheduled operation the processor can not be&#10;  transitioned to RUNNING state (e.g., STOP operation was invoked on the&#10;  processor while it's @OnScheduled operation was executing), the&#10;  processor's @OnUnscheduled operation will be invoked and its scheduling&#10;  state will be set to STOPPED at which point the processor is considered&#10;  to be fully stopped.&#10;  \</p\>&#10; "
	fontcolor=darkgreen
];

StandardProcessorNode1158014602XXXstop1422157265[
	label="+ stop()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorNode

&#10;  Will idempotently stop the processor using the following sequence: \<i\>&#10;  \<ul\>&#10;  \<li\>Transition (atomically) Processor's scheduled state from RUNNING to&#10;  STOPPING. If the above state transition succeeds, then invoke any method&#10;  on the Processor with the {@link OnUnscheduled} annotation. Once those methods&#10;  have been called and returned (either normally or exceptionally), start checking&#10;  to see if all of the Processor's active threads have finished. If not, check again&#10;  every 100 milliseconds until they have.&#10;  Once all after threads have completed, the processor's @OnStopped operation will be invoked&#10;  and its scheduled state is set to STOPPED which completes processor stop&#10;  sequence.\</li\>&#10;  \</ul\>&#10;  \</i\>&#10; &#10;  \<p\>&#10;  If for some reason processor's scheduled state can not be transitioned to&#10;  STOPPING (e.g., the processor didn't finish @OnScheduled operation when&#10;  stop was called), the attempt will be made to transition processor's&#10;  scheduled state from STARTING to STOPPING which will allow&#10;  {@link #start(ScheduledExecutorService, long, long, Supplier, SchedulingAgentCallback, boolean)}&#10;  method to initiate processor's shutdown upon exiting @OnScheduled&#10;  operation, otherwise the processor's scheduled state will remain&#10;  unchanged ensuring that multiple calls to this method are idempotent.&#10;  \</p\>&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1901156734 { 
   	label=PutSplunkHTTP
	labeljust=l
	fillcolor=white
	style=filled
   
   PutSplunkHTTP84296138XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutSplunkHTTP

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1921211216 { 
   	label=ComponentLog
	labeljust=l
	fillcolor=white
	style=filled
   
   ComponentLog978875333XXXerror1808118735[
	label="+ error()"
	style=filled
	fillcolor=white
	tooltip="ComponentLog

null"
	penwidth=4
	fontcolor=darkgreen
];
} 

subgraph cluster_1944083394 { 
   	label=PutHDFS
	labeljust=l
	fillcolor=white
	style=filled
   
   PutHDFS413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutHDFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1944639365 { 
   	label=AbstractSNMPProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractSNMPProcessor777010377XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractSNMPProcessor

&#10;  Will builds target resource upon first invocation and will delegate to the&#10;  implementation of {@link #onTriggerSnmp(ProcessContext, ProcessSession)} method for&#10;  further processing.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1981760102 { 
   	label=XMLRecordReader
	labeljust=l
	fillcolor=white
	style=filled
   
   XMLRecordReader1949539197XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="XMLRecordReader

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2001141171 { 
   	label=StandardControllerServiceNode
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardControllerServiceNode1209408061XXXdisable1430819307[
	label="+ disable()"
	style=filled
	fillcolor=white
	tooltip="StandardControllerServiceNode

&#10;  Will atomically disable this service by invoking its @OnDisabled operation.&#10;  It uses CAS operation on {@link #stateTransition} to transition this service&#10;  from ENABLED to DISABLING state. If such transition succeeds the service&#10;  will be de-activated (see {@link ControllerServiceNode#isActive()}).&#10;  If such transition doesn't succeed (the service is still in ENABLING state)&#10;  then the service will still be transitioned to DISABLING state to ensure that&#10;  no other transition could happen on this service. However in such event&#10;  (e.g., its @OnEnabled finally succeeded), the {@link #enable(ScheduledExecutorService, long)}&#10;  operation will initiate service disabling javadoc for (see {@link #enable(ScheduledExecutorService, long)}&#10;  \<br\>&#10;  Upon successful invocation of @OnDisabled this service will be transitioned to&#10;  DISABLED state.&#10; "
	fontcolor=darkgreen
];

StandardControllerServiceNode1209408061XXXenable383433797[
	label="+ enable()"
	style=filled
	fillcolor=white
	tooltip="StandardControllerServiceNode

&#10;  Will atomically enable this service by invoking its @OnEnabled operation.&#10;  It uses CAS operation on {@link #stateTransition} to transition this service&#10;  from DISABLED to ENABLING state. If such transition succeeds the service&#10;  will be marked as 'active' (see {@link ControllerServiceNode#isActive()}).&#10;  If such transition doesn't succeed then no enabling logic will be&#10;  performed and the method will exit. In other words it is safe to invoke&#10;  this operation multiple times and from multiple threads.&#10;  \<br\>&#10;  This operation will also perform re-try of service enabling in the event&#10;  of exception being thrown by previous invocation of @OnEnabled.&#10;  \<br\>&#10;  Upon successful invocation of @OnEnabled this service will be transitioned to&#10;  ENABLED state.&#10;  \<br\>&#10;  In the event where enabling took longer then expected by the user and such user&#10;  initiated disable operation, this service will be automatically disabled as soon&#10;  as it reached ENABLED state.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_2008672625 { 
   	label=StoreInKiteDataset
	labeljust=l
	fillcolor=white
	style=filled
   
   StoreInKiteDataset1617542754XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="StoreInKiteDataset

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2011696627 { 
   	label=StandardProcessGroup
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardProcessGroup1692568750XXXremoveControllerService1882324741[
	label="+ removeControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessGroup

&#10;  Removes the given Controller Service from this group&#10; &#10;  @param service the service to remove&#10; "
	fontcolor=darkgreen
];

StandardProcessGroup1692568750XXXremoveProcessor1375271532[
	label="+ removeProcessor()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessGroup

&#10;  Removes the given processor from this group, destroying the Processor.&#10;  The Processor is removed from the ProcessorRegistry, and any method in&#10;  the Processor that is annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnRemoved OnRemoved} annotation will be&#10;  invoked. All outgoing connections will also be destroyed&#10; &#10;  @param processor the Processor to remove&#10;  @throws NullPointerException if \<code\>processor\</code\> is null&#10;  @throws IllegalStateException if \<code\>processor\</code\> is not a member&#10;  of this ProcessGroup, is currently running, or has any incoming&#10;  connections.&#10; "
	fontcolor=darkgreen
];

StandardProcessGroup1692568750XXXshutdown0[
	label="+ shutdown()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessGroup

&#10;  Indicates that the Flow is being shutdown; allows cleanup of resources&#10;  associated with processors, etc.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_2024613379 { 
   	label=ConsumeGCPubSub
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeGCPubSub1271393808XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeGCPubSub

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2041829437 { 
   	label=ConsumeKafkaRecord_0_11
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_0_111914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_0_11

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2041829438 { 
   	label=ConsumeKafkaRecord_0_10
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_0_101914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_0_10

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2043953590 { 
   	label=ExecuteInfluxDBQuery
	labeljust=l
	fillcolor=white
	style=filled
   
   ExecuteInfluxDBQuery1607313889XXXonScheduled135384992[
	label="+ onScheduled()"
	style=filled
	fillcolor=white
	tooltip="ExecuteInfluxDBQuery

null"
	fontcolor=darkgreen
];

ExecuteInfluxDBQuery1607313889XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ExecuteInfluxDBQuery

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2048858659 { 
   	label=MockComponentLog
	labeljust=l
	fillcolor=white
	style=filled
   
   MockComponentLog306090332XXXdebug1808118735[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLog

null"
	fontcolor=darkgreen
];

MockComponentLog306090332XXXerror1808118735[
	label="+ error()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLog

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2051910931 { 
   	label=PutCassandraQL
	labeljust=l
	fillcolor=white
	style=filled
   
   PutCassandraQL1620253589XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutCassandraQL

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2078635752 { 
   	label=AttributesToJSON
	labeljust=l
	fillcolor=white
	style=filled
   
   AttributesToJSON470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AttributesToJSON

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2079709540 { 
   	label=LivySessionController
	labeljust=l
	fillcolor=white
	style=filled
   
   LivySessionController2038150536XXXshutdown0[
	label="+ shutdown()"
	style=filled
	fillcolor=white
	tooltip="LivySessionController

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2093369804 { 
   	label=QuartzSchedulingAgent
	labeljust=l
	fillcolor=white
	style=filled
   
   QuartzSchedulingAgent32703756XXXdoSchedule1008577232[
	label="+ doSchedule()"
	style=filled
	fillcolor=white
	tooltip="QuartzSchedulingAgent

&#10;  Schedules the provided {@link ReportingTaskNode}. Its&#10;  {@link LifecycleState} will be set to \<i\>true\</i\>&#10; &#10;  @param connectable&#10; the instance of {@link ReportingTaskNode}&#10;  @param scheduleState&#10; the instance of {@link LifecycleState}&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_2103455148 { 
   	label=StatelessProcessScheduler
	labeljust=l
	fillcolor=white
	style=filled
   
   StatelessProcessScheduler32703756XXXschedule1665165653[
	label="+ schedule()"
	style=filled
	fillcolor=white
	tooltip="StatelessProcessScheduler

&#10;  Begins scheduling the given Reporting Task to run&#10; &#10;  @param taskNode to schedule&#10; "
	fontcolor=darkgreen
];

StatelessProcessScheduler32703756XXXshutdownControllerService1166560357[
	label="+ shutdownControllerService()"
	style=filled
	fillcolor=white
	tooltip="StatelessProcessScheduler

null"
	fontcolor=darkgreen
];

StatelessProcessScheduler32703756XXXshutdownReportingTask1665165653[
	label="+ shutdownReportingTask()"
	style=filled
	fillcolor=white
	tooltip="StatelessProcessScheduler

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2130543955 { 
   	label=ListenUDPRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   ListenUDPRecord470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ListenUDPRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2139277237 { 
   	label=StatelessSchedulingAgent
	labeljust=l
	fillcolor=white
	style=filled
   
   StatelessSchedulingAgent395280032XXXschedule1008577232[
	label="+ schedule()"
	style=filled
	fillcolor=white
	tooltip="StatelessSchedulingAgent

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_219057026 { 
   	label=TerminationAwareLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   TerminationAwareLogger1158014602XXXdebug1808118735[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="TerminationAwareLogger

null"
	fontcolor=darkgreen
];

TerminationAwareLogger1158014602XXXerror1808118735[
	label="+ error()"
	style=filled
	fillcolor=white
	tooltip="TerminationAwareLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_225154716 { 
   	label=ConvertJSONToAvro
	labeljust=l
	fillcolor=white
	style=filled
   
   ConvertJSONToAvro1617542754XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConvertJSONToAvro

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_292250563 { 
   	label=ListHDFS
	labeljust=l
	fillcolor=white
	style=filled
   
   ListHDFS413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ListHDFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_292707256 { 
   	label=ExecuteProcess
	labeljust=l
	fillcolor=white
	style=filled
   
   ExecuteProcess470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ExecuteProcess

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_305739126 { 
   	label=OAuth2TokenProviderImpl
	labeljust=l
	fillcolor=white
	style=filled
   
   OAuth2TokenProviderImpl1906079573XXXgetAccessTokenByClientCredentials2013066710[
	label="+ getAccessTokenByClientCredentials()"
	style=filled
	fillcolor=white
	tooltip="OAuth2TokenProviderImpl

null"
	fontcolor=darkgreen
];

OAuth2TokenProviderImpl1906079573XXXgetAccessTokenByPassword2012146208[
	label="+ getAccessTokenByPassword()"
	style=filled
	fillcolor=white
	tooltip="OAuth2TokenProviderImpl

null"
	fontcolor=darkgreen
];

OAuth2TokenProviderImpl1906079573XXXrefreshToken625179349[
	label="+ refreshToken()"
	style=filled
	fillcolor=white
	tooltip="OAuth2TokenProviderImpl

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_310143485 { 
   	label=PutHive3Streaming
	labeljust=l
	fillcolor=white
	style=filled
   
   PutHive3Streaming1617453443XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutHive3Streaming

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_317802486 { 
   	label=ConvertJSONToSQL
	labeljust=l
	fillcolor=white
	style=filled
   
   ConvertJSONToSQL470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConvertJSONToSQL

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_319221453 { 
   	label=ConsumeWindowsEventLog
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeWindowsEventLog136919790XXXonScheduled135384992[
	label="+ onScheduled()"
	style=filled
	fillcolor=white
	tooltip="ConsumeWindowsEventLog

null"
	fontcolor=darkgreen
];

ConsumeWindowsEventLog136919790XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeWindowsEventLog

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_320771679 { 
   	label=LogMessage
	labeljust=l
	fillcolor=white
	style=filled
   
   LogMessage470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="LogMessage

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_341800133 { 
   	label=AMQPConsumer
	labeljust=l
	fillcolor=white
	style=filled
   
   AMQPConsumer1483774730XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="AMQPConsumer

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_395991849 { 
   	label=SpringContextProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   SpringContextProcessor2034349287XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="SpringContextProcessor

&#10; &#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_455921724 { 
   	label=WindowsEventLogRecordReader
	labeljust=l
	fillcolor=white
	style=filled
   
   WindowsEventLogRecordReader943493457XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="WindowsEventLogRecordReader

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_464621626 { 
   	label=StandardFlowManager
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardFlowManager2038326618XXXcreateControllerService376068543[
	label="+ createControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardFlowManager

null"
	fontcolor=darkgreen
];

StandardFlowManager2038326618XXXcreateProcessor376068543[
	label="+ createProcessor()"
	style=filled
	fillcolor=white
	tooltip="StandardFlowManager

&#10;  \<p\>&#10;  Creates a new ProcessorNode with the given type and identifier and&#10;  optionally initializes it.&#10;  \</p\>&#10; &#10;  @param type the fully qualified Processor class name&#10;  @param id the unique ID of the Processor&#10;  @param coordinate the bundle coordinate for this processor&#10;  @param firstTimeAdded whether or not this is the first time this&#10;  Processor is added to the graph. If {@code true}, will invoke methods&#10;  annotated with the {@link org.apache.nifi.annotation.lifecycle.OnAdded} annotation.&#10;  @return new processor node&#10;  @throws NullPointerException if either arg is null&#10; "
	fontcolor=darkgreen
];

StandardFlowManager2038326618XXXcreateReportingTask376068543[
	label="+ createReportingTask()"
	style=filled
	fillcolor=white
	tooltip="StandardFlowManager

null"
	fontcolor=darkgreen
];

StandardFlowManager2038326618XXXremoveRootControllerService1882324741[
	label="+ removeRootControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardFlowManager

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_481121295 { 
   	label=ConnectableTask
	labeljust=l
	fillcolor=white
	style=filled
   
   ConnectableTask1248989462XXXinvoke0[
	label="+ invoke()"
	style=filled
	fillcolor=white
	tooltip="ConnectableTask

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_492547111 { 
   	label=MockComponentLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   MockComponentLogger305847012XXXdebug1808118735[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLogger

null"
	fontcolor=darkgreen
];

MockComponentLogger305847012XXXerror1808118735[
	label="+ error()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_516018992 { 
   	label=RunProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   RunProcessor811764965XXXcall0[
	label="+ call()"
	style=filled
	fillcolor=white
	tooltip="RunProcessor

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_534103421 { 
   	label=ConsumeKafka_1_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_1_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_1_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_534104382 { 
   	label=ConsumeKafka_2_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_2_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_2_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_534104388 { 
   	label=ConsumeKafka_2_6
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_2_61914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_2_6

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_541415895 { 
   	label=SplitText
	labeljust=l
	fillcolor=white
	style=filled
   
   SplitText470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="SplitText

&#10;  Will split the incoming stream releasing all splits as FlowFile at once.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_58105479 { 
   	label=StandardStatelessFlow
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardStatelessFlow35370956XXXtrigger0[
	label="+ trigger()"
	style=filled
	fillcolor=white
	tooltip="StandardStatelessFlow

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_619038129 { 
   	label=StandardReloadComponent
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardReloadComponent1158014602XXXreload852877771[
	label="+ reload()"
	style=filled
	fillcolor=white
	tooltip="StandardReloadComponent

&#10;  Changes the underlying ControllerService held by the node to an instance of the new type.&#10; &#10;  @param existingNode the node being being updated&#10;  @param newType the fully qualified class name of the new type&#10;  @param bundleCoordinate the bundle coordinate of the new type&#10;  @param additionalUrls additional URLs to be added to the instance class loader of the new component&#10;  @throws ControllerServiceInstantiationException if unable to create an instance of the new type&#10; "
	fontcolor=darkgreen
];

StandardReloadComponent1158014602XXXreload868965083[
	label="+ reload()"
	style=filled
	fillcolor=white
	tooltip="StandardReloadComponent

&#10;  Changes the underlying ReportingTask held by the node to an instance of the new type.&#10; &#10;  @param existingNode the ReportingTaskNode being updated&#10;  @param newType the fully qualified class name of the new type&#10;  @param bundleCoordinate the bundle coordinate of the new type&#10;  @param additionalUrls additional URLs to be added to the instance class loader of the new component&#10;  @throws ReportingTaskInstantiationException if unable to create an instance of the new type&#10; "
	fontcolor=darkgreen
];

StandardReloadComponent1158014602XXXreload953528860[
	label="+ reload()"
	style=filled
	fillcolor=white
	tooltip="StandardReloadComponent

&#10;  Changes the underlying Processor held by the node to an instance of the new type.&#10; &#10;  @param existingNode the node being being updated&#10;  @param newType the fully qualified class name of the new type&#10;  @param bundleCoordinate the bundle coordinate of the new type&#10;  @param additionalUrls additional URLs to be added to the instance class loader of the new component&#10;  @throws ControllerServiceInstantiationException if unable to create an instance of the new type&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_622692844 { 
   	label=ConsumeKafka_0_11
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_0_111914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_0_11

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_622692845 { 
   	label=ConsumeKafka_0_10
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_0_101914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_0_10

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_668160713 { 
   	label=ExecuteGroovyScript
	labeljust=l
	fillcolor=white
	style=filled
   
   ExecuteGroovyScript318464201XXXonScheduled135384992[
	label="+ onScheduled()"
	style=filled
	fillcolor=white
	tooltip="ExecuteGroovyScript

&#10;  Performs setup operations when the processor is scheduled to run. This includes evaluating the processor's&#10;  properties, as well as reloading the script (from file or the \"Script Body\" property)&#10; &#10;  @param context the context in which to perform the setup operations&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_671167630 { 
   	label=PutRethinkDB
	labeljust=l
	fillcolor=white
	style=filled
   
   PutRethinkDB760475350XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutRethinkDB

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_689357447 { 
   	label=QueryCassandra
	labeljust=l
	fillcolor=white
	style=filled
   
   QueryCassandra1620253589XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="QueryCassandra

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_727959565 { 
   	label=GetHDFSFileInfo
	labeljust=l
	fillcolor=white
	style=filled
   
   GetHDFSFileInfo413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetHDFSFileInfo

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_765216251 { 
   	label=CompareFuzzyHash
	labeljust=l
	fillcolor=white
	style=filled
   
   CompareFuzzyHash641546778XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="CompareFuzzyHash

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_80602103 { 
   	label=EventSubscribeXmlRenderingCallback
	labeljust=l
	fillcolor=white
	style=filled
   
   EventSubscribeXmlRenderingCallback167743295XXXonEvent1052582333[
	label="+ onEvent()"
	style=filled
	fillcolor=white
	tooltip="EventSubscribeXmlRenderingCallback

&#10;  Callback method that will be invoked when new events come in&#10; &#10;  @param evtSubscribeNotifyAction the notify action&#10;  @param userContext the user context&#10;  @param eventHandle the event handle&#10;  @return an int that will be ignored by the Windows Log API (https://msdn.microsoft.com/en-us/library/windows/desktop/aa385577(v=vs.85).aspx)&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_80787356 { 
   	label=AbstractFetchHDFSRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractFetchHDFSRecord413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractFetchHDFSRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_811764965 { 
   	label=StandardProcessorTestRunner
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardProcessorTestRunner306090332XXXaddControllerService533701472[
	label="+ addControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorTestRunner

&#10;  Adds the given {@link ControllerService} to this TestRunner so that the&#10;  configured Processor can access it using the given&#10;  \<code\>identifier\</code\>. The ControllerService is not expected to be&#10;  initialized, as the framework will create the appropriate&#10;  {@link org.apache.nifi.controller.ControllerServiceInitializationContext ControllerServiceInitializationContext}&#10;  and initialize the ControllerService with the given properties.&#10; &#10;  This will call any method on the given Controller Service that is&#10;  annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnAdded @OnAdded} annotation.&#10; &#10;  @param identifier of service&#10;  @param service the service&#10;  @param properties service properties&#10;  @throws InitializationException ie&#10; "
	fontcolor=darkgreen
];

StandardProcessorTestRunner306090332XXXdisableControllerService434883751[
	label="+ disableControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorTestRunner

&#10;  \<p\>&#10;  Marks the Controller Service as disabled so that it cannot be used by&#10;  other components.&#10;  \</p\>&#10; &#10;  \<p\>&#10;  This method will result in calling any method in the Controller Service&#10;  that is annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnDisabled @OnDisabled}&#10;  annotation.&#10;  \</p\>&#10; &#10;  @param service the service to disable&#10; "
	fontcolor=darkgreen
];

StandardProcessorTestRunner306090332XXXenableControllerService434883751[
	label="+ enableControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorTestRunner

&#10;  \<p\>&#10;  Marks the Controller Service as enabled so that it can be used by other&#10;  components.&#10;  \</p\>&#10; &#10;  \<p\>&#10;  This method will result in calling any method in the Controller Service&#10;  that is annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnEnabled @OnEnabled}&#10;  annotation.&#10;  \</p\>&#10; &#10;  @param service the service to enable&#10; "
	fontcolor=darkgreen
];

StandardProcessorTestRunner306090332XXXremoveControllerService434883751[
	label="+ removeControllerService()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorTestRunner

&#10;  \<p\>&#10;  Removes the Controller Service from the TestRunner. This will call any&#10;  method on the ControllerService that is annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnRemoved @OnRemoved}&#10;  annotation.&#10;  \</p\>&#10; &#10;  @param service the service&#10; &#10;  @throws IllegalStateException if the ControllerService is not disabled&#10;  @throws IllegalArgumentException if the given ControllerService is not&#10;  known by this TestRunner (i.e., it has not been added via the&#10;  {@link #addControllerService(String, ControllerService)} or&#10;  {@link #addControllerService(String, ControllerService, Map)} method or&#10;  if the Controller Service has been removed via the&#10;  {@link #removeControllerService(ControllerService)} method.&#10; &#10; "
	fontcolor=darkgreen
];

StandardProcessorTestRunner306090332XXXrun801896609[
	label="+ run()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorTestRunner

&#10;  This method runs the {@link Processor} \<code\>iterations\</code\> times,&#10;  using the sequence of steps below:&#10;  \<ul\>&#10;  \<li\>&#10;  If {@code initialize} is true, run all methods on the Processor that are&#10;  annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnScheduled @OnScheduled} annotation. If&#10;  any of these methods throws an Exception, the Unit Test will fail.&#10;  \</li\>&#10;  \<li\>&#10;  Schedule the&#10;  {@link Processor#onTrigger(ProcessContext, ProcessSessionFactory) onTrigger}&#10;  method to be invoked \<code\>iterations\</code\> times. The number of threads&#10;  used to run these iterations is determined by the ThreadCount of this&#10;  \<code\>TestRunner\</code\>. By default, the value is set to 1, but it can be&#10;  modified by calling the {@link #setThreadCount(int)} method.&#10;  \</li\>&#10;  \<li\>&#10;  As soon as the first thread finishes its execution of&#10;  {@link Processor#onTrigger(ProcessContext, ProcessSessionFactory) onTrigger},&#10;  all methods on the Processor that are annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnUnscheduled @OnUnscheduled} annotation&#10;  are invoked. If any of these methods throws an Exception, the Unit Test&#10;  will fail.&#10;  \</li\>&#10;  \<li\>&#10;  Waits for all threads to finish execution.&#10;  \</li\>&#10;  \<li\>&#10;  If and only if the value of \<code\>shutdown\</code\> is true: Call all&#10;  methods on the Processor that is annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnStopped @OnStopped} annotation.&#10;  \</li\>&#10;  \</ul\>&#10; &#10;  @param iterations number of iterations&#10;  @param stopOnFinish whether or not to run the Processor methods that are&#10; annotated with {@link org.apache.nifi.annotation.lifecycle.OnStopped @OnStopped}&#10;  @param initialize true if must initialize&#10;  @param runWait indicates the amount of time in milliseconds that the framework should wait for&#10; processors to stop running before calling the {@link org.apache.nifi.annotation.lifecycle.OnUnscheduled @OnUnscheduled} annotation&#10; "
	fontcolor=darkgreen
];

StandardProcessorTestRunner306090332XXXshutdown0[
	label="+ shutdown()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessorTestRunner

&#10;  Invokes all methods on the Processor that are annotated with the&#10;  {@link org.apache.nifi.annotation.lifecycle.OnShutdown @OnShutdown} annotation. If&#10;  any of these methods throws an Exception, the Unit Test will fail&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_833282584 { 
   	label=AbstractListProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractListProcessor1549696020XXXlistByTimeWindow1421322213[
	label="+ listByTimeWindow()"
	style=filled
	fillcolor=white
	tooltip="AbstractListProcessor

null"
	fontcolor=darkgreen
];

AbstractListProcessor1549696020XXXlistByTrackingTimestamps1421322213[
	label="+ listByTrackingTimestamps()"
	style=filled
	fillcolor=white
	tooltip="AbstractListProcessor

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_839589085 { 
   	label=AbstractEmailProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractEmailProcessor1401222167XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractEmailProcessor

&#10; &#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_856752204 { 
   	label=MetricsReportingTask
	labeljust=l
	fillcolor=white
	style=filled
   
   MetricsReportingTask1702390954XXXonTrigger602840001[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="MetricsReportingTask

&#10;  Report the registered metrics.&#10; &#10;  @param context used for getting the most recent {@link ProcessGroupStatus}.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_876502453 { 
   	label=AbstractFlowManager
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractFlowManager2038326618XXXremoveReportingTask1665165653[
	label="+ removeReportingTask()"
	style=filled
	fillcolor=white
	tooltip="AbstractFlowManager

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_914291432 { 
   	label=SiteToSiteReportingRecordSink
	labeljust=l
	fillcolor=white
	style=filled
   
   SiteToSiteReportingRecordSink1039218477XXXonEnabled1613222919[
	label="+ onEnabled()"
	style=filled
	fillcolor=white
	tooltip="SiteToSiteReportingRecordSink

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_932155848 { 
   	label=CDAValidationHandler
	labeljust=l
	fillcolor=white
	style=filled
   
   CDAValidationHandler1247101897XXXhandleError445560775[
	label="+ handleError()"
	style=filled
	fillcolor=white
	tooltip="CDAValidationHandler

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_933285990 { 
   	label=ConsumeKafka
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka1914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_994501173 { 
   	label=DeleteDynamoDB
	labeljust=l
	fillcolor=white
	style=filled
   
   DeleteDynamoDB761724532XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="DeleteDynamoDB

null"
	fontcolor=darkgreen
];
} 
} 

subgraph cluster_781827056 { 
   	label=hive
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   subgraph cluster_897914146 { 
   	label=NiFiRecordSerDe
	labeljust=l
	fillcolor=white
	style=filled
   
   NiFiRecordSerDe967708794XXXdeserialize1781942336[
	label="+ deserialize()"
	style=filled
	fillcolor=white
	tooltip="NiFiRecordSerDe

null"
	fontcolor=darkgreen
];
} 
} 
} 

'edges    
AMQPConsumer1483774730XXXclose0 -> ComponentLog978875333XXXerror1808118735;
AbstractCassandraProcessor1620253589XXXonScheduled135384992 -> ComponentLog978875333XXXerror1808118735;
AbstractDeleteHBase886316319XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
AbstractEmailProcessor1401222167XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
AbstractFetchHDFSRecord413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
AbstractFlowManager2038326618XXXremoveReportingTask1665165653 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
AbstractJMSProcessor80226329XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
AbstractKafkaProcessor1396033677XXXonTrigger302525551 -> ComponentLog978875333XXXerror1808118735;
AbstractListProcessor1549696020XXXlistByTimeWindow1421322213 -> ComponentLog978875333XXXerror1808118735;
AbstractListProcessor1549696020XXXlistByTrackingTimestamps1421322213 -> ComponentLog978875333XXXerror1808118735;
AbstractProcessor786985848XXXonTrigger1421322213 -> AbstractJMSProcessor80226329XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> AbstractSNMPProcessor777010377XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ConsumeGCPubSub1271393808XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ConvertAvroSchema1617542754XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ConvertJSONToAvro1617542754XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ConvertJSONToSQL470851760XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> DeleteDynamoDB761724532XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> DeleteGridFS1775368734XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ExecuteSparkInteractive1617572627XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ExtractCCDAAttributes1617298160XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> FetchGridFS1775368734XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> GetDynamoDB761724532XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ListHDFS413313672XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> MonitorActivity470851760XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> PublishKafka_2_01914862338XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> PublishKafka_2_61914862338XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> PutAzureCosmosDBRecord717846349XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> PutDatabaseRecord470851760XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> PutDynamoDB761724532XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> PutSplunkHTTP84296138XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> StoreInKiteDataset1617542754XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger302525551 -> AbstractProcessor786985848XXXonTrigger1421322213;
AbstractPutHDFSRecord413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
AbstractSNMPProcessor777010377XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
AttributesToCSV470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
AttributesToJSON470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
CDAValidationHandler1247101897XXXhandleError445560775 -> ComponentLog978875333XXXerror1808118735;
CompareFuzzyHash641546778XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ComponentLog978875333XXXerror1808118735 -> MockComponentLog306090332XXXerror1808118735;
ComponentLog978875333XXXerror1808118735 -> MockComponentLogger305847012XXXerror1808118735;
ComponentLog978875333XXXerror1808118735 -> NopComponentLog832281502XXXerror1808118735;
ComponentLog978875333XXXerror1808118735 -> SimpleProcessLogger786985848XXXerror1808118735;
ComponentLog978875333XXXerror1808118735 -> TerminationAwareLogger1158014602XXXerror1808118735;
ConnectableTask1248989462XXXinvoke0 -> StandardProcessorNode1158014602XXXonTrigger302525551;
ConsumeGCPubSub1271393808XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafka1914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafkaRecord_0_101914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafkaRecord_0_111914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafkaRecord_1_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafkaRecord_2_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafkaRecord_2_61914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafka_0_101914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafka_0_111914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafka_1_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafka_2_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeKafka_2_61914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConsumeWindowsEventLog136919790XXXonScheduled135384992 -> ComponentLog978875333XXXerror1808118735;
ConsumeWindowsEventLog136919790XXXonTrigger302525551 -> ComponentLog978875333XXXerror1808118735;
ConvertAvroSchema1617542754XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConvertCSVToAvro1617542754XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConvertJSONToAvro1617542754XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ConvertJSONToSQL470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
CreateHadoopSequenceFile413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
DatabaseRecordSink1272331786XXXsendData1493945457 -> ComponentLog978875333XXXerror1808118735;
DeleteDynamoDB761724532XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
DeleteGridFS1775368734XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
DeleteMongo624533887XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
DeleteRethinkDB760475350XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
EventDrivenTask1117794091XXXrun0 -> StandardProcessorNode1158014602XXXonTrigger302525551;
EventQueue461065943XXXoffer69 -> ComponentLog978875333XXXerror1808118735;
EventSubscribeXmlRenderingCallback167743295XXXonEvent1052582333 -> ComponentLog978875333XXXerror1808118735;
ExecuteGroovyScript318464201XXXonScheduled135384992 -> ComponentLog978875333XXXerror1808118735;
ExecuteInfluxDBQuery1607313889XXXonScheduled135384992 -> ComponentLog978875333XXXerror1808118735;
ExecuteInfluxDBQuery1607313889XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ExecuteProcess470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ExecuteSparkInteractive1617572627XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ExtractCCDAAttributes1617298160XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
FetchGridFS1775368734XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
FlowController1158014602XXXinitializeFlow1485893118 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
GetDynamoDB761724532XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
GetHDFSFileInfo413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
GetRethinkDB760475350XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
GetSplunk84296138XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
InvokeMicrosoftGraphCalendar652418931XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
InvokeScriptedProcessor96134626XXXonTrigger302525551 -> AbstractKafkaProcessor1396033677XXXonTrigger302525551;
InvokeScriptedProcessor96134626XXXonTrigger302525551 -> ComponentLog978875333XXXerror1808118735;
ListHDFS413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ListenSMTP1401222167XXXstop0 -> ComponentLog978875333XXXerror1808118735;
ListenUDPRecord470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
LivySessionController2038150536XXXshutdown0 -> ComponentLog978875333XXXerror1808118735;
LogAttribute470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
LogMessage470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
LumberjackFrameHandler1185999207XXXhandle255842137 -> ComponentLog978875333XXXerror1808118735;
MetricsReportingTask1702390954XXXonTrigger602840001 -> ComponentLog978875333XXXerror1808118735;
MockComponentLog306090332XXXdebug1808118735 -> CapturingLogger306090332XXXdebug658265366;
MonitorActivity470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
MoveHDFS413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
NiFiRecordSerDe967708794XXXdeserialize1781942336 -> ComponentLog978875333XXXerror1808118735;
OAuth2TokenProviderImpl1906079573XXXgetAccessTokenByClientCredentials2013066710 -> ComponentLog978875333XXXerror1808118735;
OAuth2TokenProviderImpl1906079573XXXgetAccessTokenByPassword2012146208 -> ComponentLog978875333XXXerror1808118735;
OAuth2TokenProviderImpl1906079573XXXrefreshToken625179349 -> ComponentLog978875333XXXerror1808118735;
ProvenanceEnumerator2089535909XXXmoveNext0 -> ComponentLog978875333XXXerror1808118735;
PublishKafkaRecord_2_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PublishKafkaRecord_2_61914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PublishKafka_2_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PublishKafka_2_61914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PublishMQTT1617610039XXXmessageArrived477200798 -> ComponentLog978875333XXXerror1808118735;
PutAzureCosmosDBRecord717846349XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutCassandraQL1620253589XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutDatabaseRecord470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutDynamoDB761724532XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutElasticsearchRecord466089974XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutGridFS1775368734XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutHDFS413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutHive3Streaming1617453443XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutInfluxDB1607313889XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutKudu1617553806XXXonScheduled135384992 -> ComponentLog978875333XXXerror1808118735;
PutRethinkDB760475350XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutS3Object593015804XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutSlack1388322851XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutSplunkHTTP84296138XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
PutTCP470851760XXXonTrigger302525551 -> ComponentLog978875333XXXerror1808118735;
QuartzSchedulingAgent32703756XXXdoSchedule1008577232 -> ReportingTaskWrapper1248989462XXXrun0;
QueryCassandra1620253589XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotations1136223332;
ReflectionUtils306090332XXXinvokeMethodsWithAnnotations1136223332 -> ComponentLog978875333XXXerror1808118735;
ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotations53280159;
ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation285050154 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotations53280159;
ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotations1136223332 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotations53280159;
ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotations53280159 -> ComponentLog978875333XXXerror1808118735;
ReportingTaskWrapper1248989462XXXrun0 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
ReportingTaskWrapper1248989462XXXrun0 -> SiteToSiteMetricsReportingTask1528425748XXXonTrigger602840001;
RunProcessor811764965XXXcall0 -> AbstractKafkaProcessor1396033677XXXonTrigger302525551;
SimpleProcessLogger786985848XXXerror1808118735 -> SimpleProcessLogger786985848XXXerror424332965;
SimpleProcessLogger786985848XXXerror424332965 -> StandardLogRepository1292167443XXXaddLogMessage907761562;
SimpleProcessLogger786985848XXXerror424332965 -> StandardLogRepository1292167443XXXaddLogMessage936633774;
SiteToSiteMetricsReportingTask1528425748XXXonTrigger602840001 -> ComponentLog978875333XXXerror1808118735;
SiteToSiteReportingRecordSink1039218477XXXonEnabled1613222919 -> SiteToSiteUtils864805466XXXgetClient2136060475;
SiteToSiteUtils864805466XXXgetClient2136060475 -> ComponentLog978875333XXXerror1808118735;
SplitText470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
SpringContextProcessor2034349287XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
StandardControllerServiceNode1209408061XXXdisable1430819307 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardControllerServiceNode1209408061XXXenable383433797 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardControllerServiceNode1209408061XXXenable383433797 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardFlowManager2038326618XXXcreateControllerService376068543 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardFlowManager2038326618XXXcreateControllerService376068543 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardFlowManager2038326618XXXcreateProcessor376068543 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardFlowManager2038326618XXXcreateProcessor376068543 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardFlowManager2038326618XXXcreateReportingTask376068543 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardFlowManager2038326618XXXcreateReportingTask376068543 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardFlowManager2038326618XXXremoveRootControllerService1882324741 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessGroup1692568750XXXremoveControllerService1882324741 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessGroup1692568750XXXremoveProcessor1375271532 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessGroup1692568750XXXshutdown0 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXschedule1665165653 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXschedule1665165653 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXschedule1665165653 -> StatelessSchedulingAgent395280032XXXschedule1008577232;
StandardProcessScheduler32703756XXXshutdownControllerService1166560357 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXshutdownReportingTask1665165653 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXstopFunnel2115478486 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXstopPort2493601 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXunschedule1665165653 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessScheduler32703756XXXunschedule1665165653 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessSession1624409406XXXcommit0 -> StandardProcessorNode1158014602XXXonTrigger302525551;
StandardProcessorNode1158014602XXXonTrigger302525551 -> AbstractKafkaProcessor1396033677XXXonTrigger302525551;
StandardProcessorNode1158014602XXXstart1438961993 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessorNode1158014602XXXstop1422157265 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardProcessorTestRunner306090332XXXaddControllerService533701472 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessorTestRunner306090332XXXdisableControllerService434883751 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessorTestRunner306090332XXXenableControllerService434883751 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessorTestRunner306090332XXXremoveControllerService434883751 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessorTestRunner306090332XXXrun801896609 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardProcessorTestRunner306090332XXXshutdown0 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StandardReloadComponent1158014602XXXreload852877771 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardReloadComponent1158014602XXXreload868965083 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardReloadComponent1158014602XXXreload953528860 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StandardStatelessFlow35370956XXXtrigger0 -> StandardProcessorNode1158014602XXXonTrigger302525551;
StatelessFlowManager395280032XXXcreateControllerService376068543 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StatelessFlowManager395280032XXXcreateControllerService376068543 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StatelessFlowManager395280032XXXcreateProcessor376068543 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StatelessFlowManager395280032XXXcreateProcessor376068543 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StatelessFlowManager395280032XXXcreateReportingTask376068543 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StatelessFlowManager395280032XXXcreateReportingTask376068543 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StatelessProcessScheduler32703756XXXschedule1665165653 -> ReflectionUtils306090332XXXinvokeMethodsWithAnnotation1610628571;
StatelessProcessScheduler32703756XXXschedule1665165653 -> StatelessSchedulingAgent395280032XXXschedule1008577232;
StatelessProcessScheduler32703756XXXshutdownControllerService1166560357 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StatelessProcessScheduler32703756XXXshutdownReportingTask1665165653 -> ReflectionUtils306090332XXXquietlyInvokeMethodsWithAnnotation1610628571;
StatelessSchedulingAgent395280032XXXschedule1008577232 -> SiteToSiteMetricsReportingTask1528425748XXXonTrigger602840001;
StoreInKiteDataset1617542754XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
TerminationAwareLogger1158014602XXXerror1808118735 -> ComponentLog978875333XXXerror1808118735;
TerminationAwareLogger1158014602XXXerror1808118735 -> MockComponentLog306090332XXXdebug1808118735;
TerminationAwareLogger1158014602XXXerror1808118735 -> MockComponentLogger305847012XXXdebug1808118735;
TerminationAwareLogger1158014602XXXerror1808118735 -> NopComponentLog832281502XXXdebug1808118735;
TerminationAwareLogger1158014602XXXerror1808118735 -> SimpleProcessLogger786985848XXXdebug1808118735;
TerminationAwareLogger1158014602XXXerror1808118735 -> TerminationAwareLogger1158014602XXXdebug1808118735;
UpdateAttribute173150506XXXonTrigger1421322213 -> ComponentLog978875333XXXerror1808118735;
WindowsEventLogRecordReader943493457XXXclose0 -> ComponentLog978875333XXXerror1808118735;
XMLRecordReader1949539197XXXclose0 -> ComponentLog978875333XXXerror1808118735;
    
}
@enduml