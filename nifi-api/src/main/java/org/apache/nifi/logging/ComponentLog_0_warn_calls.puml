@startuml

/' diagram meta data start
config=CallConfiguration;
{
  "rootMethod": "org.apache.nifi.logging.ComponentLog#warn(String,Throwable)",
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showMethodParametersTypes": false,
    "showMethodParametersNames": false,
    "showMethodReturnType": false,
    "showPackageLevels": 2,
    "showCallOrder": false,
    "edgeMode": "MethodsOnly", // TypesOnly, MethodsOnly, TypesAndMethods, MethodsAndDirectTypeUsage
    "showDetailedClassStructure": false
  },
  "rootClass": "org.apache.nifi.logging.ComponentLog"
}
diagram meta data end '/



digraph g {
    rankdir="LR"
    splines=polyline
    

'nodes 
subgraph cluster_1411517106 { 
   	label=apache
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_781648802 { 
   	label=nifi
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   subgraph cluster_1008684560 { 
   	label=StandardProcessSession
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardProcessSession1624409406XXXread199736687[
	label="+ read()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessSession

&#10;  Executes the given callback against the contents corresponding to the&#10;  given FlowFile.&#10; &#10;  @param source flowfile to retrieve content of&#10;  @param reader that will be called to read the flowfile content&#10;  @throws IllegalStateException if detected that this method is being&#10;  called from within a write callback of another method (i.e., from within the callback&#10;  that is passed to {@link #write(FlowFile, OutputStreamCallback)} or {@link #write(FlowFile, StreamCallback)})&#10;  or has an OutputStream open (via a call to {@link #write(FlowFile)}) in this session and for&#10;  the given FlowFile(s). Said another way, it is not permissible to call this method while writing to&#10;  the same FlowFile.&#10;  @throws FlowFileHandlingException if the given FlowFile is already&#10;  transferred or removed or doesn't belong to this session. Automatic&#10;  rollback will occur.&#10;  @throws MissingFlowFileException if the given FlowFile content cannot be&#10;  found. The FlowFile should no longer be referenced, will be internally&#10;  destroyed, and the session is automatically rolled back and what is left&#10;  of the FlowFile is destroyed.&#10;  @throws FlowFileAccessException if some IO problem occurs accessing&#10;  FlowFile content; if an attempt is made to access the InputStream&#10;  provided to the given InputStreamCallback after this method completed its&#10;  execution&#10; "
	fontcolor=darkgreen
];

StandardProcessSession1624409406XXXread661097743[
	label="+ read()"
	style=filled
	fillcolor=white
	tooltip="StandardProcessSession

&#10;  Executes the given callback against the contents corresponding to the&#10;  given FlowFile.&#10; &#10;  \<i\>Note\</i\>: The OutputStream provided to the given OutputStreamCallback&#10;  will not be accessible once this method has completed its execution.&#10; &#10;  @param source flowfile to retrieve content of&#10;  @param allowSessionStreamManagement allow session to hold the stream open for performance reasons&#10;  @param reader that will be called to read the flowfile content&#10;  @throws IllegalStateException if detected that this method is being&#10;  called from within a write callback of another method (i.e., from within the callback&#10;  that is passed to {@link #write(FlowFile, OutputStreamCallback)} or {@link #write(FlowFile, StreamCallback)})&#10;  or has an OutputStream open (via a call to {@link #write(FlowFile)}) in this session and for&#10;  the given FlowFile(s). Said another way, it is not permissible to call this method while writing to&#10;  the same FlowFile.&#10;  @throws FlowFileHandlingException if the given FlowFile is already&#10;  transferred or removed or doesn't belong to this session. Automatic&#10;  rollback will occur.&#10;  @throws MissingFlowFileException if the given FlowFile content cannot be&#10;  found. The FlowFile should no longer be reference, will be internally&#10;  destroyed, and the session is automatically rolled back and what is left&#10;  of the FlowFile is destroyed.&#10;  @throws FlowFileAccessException if some IO problem occurs accessing&#10;  FlowFile content; if an attempt is made to access the InputStream&#10;  provided to the given InputStreamCallback after this method completed its&#10;  execution&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1040168729 { 
   	label=CaptureChangeMySQL
	labeljust=l
	fillcolor=white
	style=filled
   
   CaptureChangeMySQL485385363XXXonPrimaryNodeChange193556499[
	label="+ onPrimaryNodeChange()"
	style=filled
	fillcolor=white
	tooltip="CaptureChangeMySQL

null"
	fontcolor=darkgreen
];

CaptureChangeMySQL485385363XXXonStopped135384992[
	label="+ onStopped()"
	style=filled
	fillcolor=white
	tooltip="CaptureChangeMySQL

null"
	fontcolor=darkgreen
];

CaptureChangeMySQL485385363XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="CaptureChangeMySQL

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1084483878 { 
   	label=ConvertAvroSchema
	labeljust=l
	fillcolor=white
	style=filled
   
   ConvertAvroSchema1617542754XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConvertAvroSchema

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1116556550 { 
   	label=PutSplunk
	labeljust=l
	fillcolor=white
	style=filled
   
   PutSplunk84296138XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutSplunk

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1179117510 { 
   	label=WrappedMessageConsumer
	labeljust=l
	fillcolor=white
	style=filled
   
   WrappedMessageConsumer518595616XXXclose334830297[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="WrappedMessageConsumer

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1212227920 { 
   	label=PutUDP
	labeljust=l
	fillcolor=white
	style=filled
   
   PutUDP470851760XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutUDP

&#10;  event handler method to handle the FlowFile being forwarded to the Processor by the framework. The FlowFile contents is sent out as a UDP datagram using an acquired ChannelSender object. If the&#10;  FlowFile contents was sent out successfully then the FlowFile is forwarded to the success relationship. If an error occurred then the FlowFile is forwarded to the failure relationship.&#10; &#10;  @param context&#10; - the current process context.&#10; &#10;  @param sessionFactory&#10; - a factory object to obtain a process session.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1212228912 { 
   	label=PutTCP
	labeljust=l
	fillcolor=white
	style=filled
   
   PutTCP470851760XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutTCP

&#10;  event handler method to handle the FlowFile being forwarded to the Processor by the framework. The FlowFile contents is sent out over a TCP connection using an acquired ChannelSender object. If&#10;  the FlowFile contents was sent out successfully then the FlowFile is forwarded to the success relationship. If an error occurred then the FlowFile is forwarded to the failure relationship.&#10; &#10;  @param context&#10; - the current process context.&#10; &#10;  @param sessionFactory&#10; - a factory object to obtain a process session.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1214845525 { 
   	label=GetKafka
	labeljust=l
	fillcolor=white
	style=filled
   
   GetKafka1396033677XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetKafka

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1222472989 { 
   	label=FlowFileEnumerator
	labeljust=l
	fillcolor=white
	style=filled
   
   FlowFileEnumerator212020097XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="FlowFileEnumerator

null"
	fontcolor=darkgreen
];

FlowFileEnumerator212020097XXXreset0[
	label="+ reset()"
	style=filled
	fillcolor=white
	tooltip="FlowFileEnumerator

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1226237647 { 
   	label=JMSConsumer
	labeljust=l
	fillcolor=white
	style=filled
   
   JMSConsumer80226329XXXconsume385240460[
	label="+ consume()"
	style=filled
	fillcolor=white
	tooltip="JMSConsumer

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1226525087 { 
   	label=HandleHttpRequest
	labeljust=l
	fillcolor=white
	style=filled
   
   HandleHttpRequest470851760XXXonPrimaryNodeChange193556499[
	label="+ onPrimaryNodeChange()"
	style=filled
	fillcolor=white
	tooltip="HandleHttpRequest

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1237439202 { 
   	label=MetricsEventReportingTask
	labeljust=l
	fillcolor=white
	style=filled
   
   MetricsEventReportingTask864807412XXXonTrigger602840001[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="MetricsEventReportingTask

&#10;  This method is called on a scheduled interval to allow the Reporting Task&#10;  to perform its tasks.&#10; &#10;  @param context reporting context&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1247026487 { 
   	label=ConsumeMQTT
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeMQTT1617610039XXXonStopped135384992[
	label="+ onStopped()"
	style=filled
	fillcolor=white
	tooltip="ConsumeMQTT

null"
	fontcolor=darkgreen
];

ConsumeMQTT1617610039XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeMQTT

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1250929481 { 
   	label=SimpleProcessLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   SimpleProcessLogger786985848XXXdebug424332965[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="SimpleProcessLogger

null"
	fontcolor=darkgreen
];

SimpleProcessLogger786985848XXXwarn424332965[
	label="+ warn()"
	style=filled
	fillcolor=white
	tooltip="SimpleProcessLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1265858470 { 
   	label=SimpleConsumerLease
	labeljust=l
	fillcolor=white
	style=filled
   
   SimpleConsumerLease897766334XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="SimpleConsumerLease

&#10;  Abstract method that is intended to be extended by the pool that created&#10;  this ConsumerLease object. It should ensure that the session given to&#10;  create this session is rolled back and that the underlying kafka consumer&#10;  is either returned to the pool for continued use or destroyed if this&#10;  lease has been poisoned. It can only be called once. Calling it more than&#10;  once can result in undefined and non threadsafe behavior.&#10; "
	fontcolor=darkgreen
];

SimpleConsumerLease897766334XXXclose64711720[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="SimpleConsumerLease

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1284165275 { 
   	label=GetTCP
	labeljust=l
	fillcolor=white
	style=filled
   
   GetTCP437767650XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetTCP

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];

GetTCP437767650XXXtearDown0[
	label="+ tearDown()"
	style=filled
	fillcolor=white
	tooltip="GetTCP

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1316988765 { 
   	label=PutDatabaseRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   PutDatabaseRecord470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutDatabaseRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1319608814 { 
   	label=ConsumeKafkaRecord_1_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_1_01914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_1_0

null"
	fontcolor=darkgreen
];

ConsumeKafkaRecord_1_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_1_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1319609775 { 
   	label=ConsumeKafkaRecord_2_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_2_01914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_2_0

null"
	fontcolor=darkgreen
];

ConsumeKafkaRecord_2_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_2_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1319609781 { 
   	label=ConsumeKafkaRecord_2_6
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_2_61914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_2_6

null"
	fontcolor=darkgreen
];

ConsumeKafkaRecord_2_61914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_2_6

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1333728902 { 
   	label=AbstractProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractProcessor786985848XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractProcessor

null"
	fontcolor=darkgreen
];

AbstractProcessor786985848XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractProcessor

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1351850157 { 
   	label=FlowFileStreamMerger
	labeljust=l
	fillcolor=white
	style=filled
   
   FlowFileStreamMerger231340831XXXmerge1194193339[
	label="+ merge()"
	style=filled
	fillcolor=white
	tooltip="FlowFileStreamMerger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1390069193 { 
   	label=AbstractKafkaProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractKafkaProcessor1396033677XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="AbstractKafkaProcessor

&#10;  Will call {@link Closeable#close()} on the target resource after which&#10;  the target resource will be set to null. Should only be called when there&#10;  are no more threads being executed on this processor or when it has been&#10;  verified that only a single thread remains.&#10; &#10;  @see KafkaPublisher&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1428071880 { 
   	label=ReportingTaskWrapper
	labeljust=l
	fillcolor=white
	style=filled
   
   ReportingTaskWrapper1248989462XXXrun0[
	label="+ run()"
	style=filled
	fillcolor=white
	tooltip="ReportingTaskWrapper

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_148908720 { 
   	label=BinaryConcatenationMerge
	labeljust=l
	fillcolor=white
	style=filled
   
   BinaryConcatenationMerge231340831XXXmerge1194193339[
	label="+ merge()"
	style=filled
	fillcolor=white
	tooltip="BinaryConcatenationMerge

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_150470145 { 
   	label=GetSplunk
	labeljust=l
	fillcolor=white
	style=filled
   
   GetSplunk84296138XXXonScheduled135384992[
	label="+ onScheduled()"
	style=filled
	fillcolor=white
	tooltip="GetSplunk

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1534396166 { 
   	label=NopComponentLog
	labeljust=l
	fillcolor=white
	style=filled
   
   NopComponentLog832281502XXXdebug424332965[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="NopComponentLog

null"
	fontcolor=darkgreen
];

NopComponentLog832281502XXXwarn424332965[
	label="+ warn()"
	style=filled
	fillcolor=white
	tooltip="NopComponentLog

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1539339218 { 
   	label=MetricsSqlQueryService
	labeljust=l
	fillcolor=white
	style=filled
   
   MetricsSqlQueryService864807412XXXcloseQuietly698239307[
	label="+ closeQuietly()"
	style=filled
	fillcolor=white
	tooltip="MetricsSqlQueryService

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1619901517 { 
   	label=ListenHTTP
	labeljust=l
	fillcolor=white
	style=filled
   
   ListenHTTP470851760XXXonPrimaryNodeChange193556499[
	label="+ onPrimaryNodeChange()"
	style=filled
	fillcolor=white
	tooltip="ListenHTTP

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1670086958 { 
   	label=PutHiveStreaming
	labeljust=l
	fillcolor=white
	style=filled
   
   PutHiveStreaming1617453443XXXcleanup0[
	label="+ cleanup()"
	style=filled
	fillcolor=white
	tooltip="PutHiveStreaming

null"
	fontcolor=darkgreen
];

PutHiveStreaming1617453443XXXonTrigger302525551[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutHiveStreaming

&#10;  \<p\>&#10;  The method called when this processor is triggered to operate by the&#10;  controller. In the absence of the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation,&#10;  this method may be called concurrently from different threads.&#10;  When this method is called depends on how this processor is&#10;  configured within a controller to be triggered (timing or event&#10;  based).\</p\>&#10; &#10;  @param context provides access to convenience methods for obtaining&#10;  property values, delaying the scheduling of the processor, provides&#10;  access to Controller Services, etc.&#10;  @param sessionFactory provides access to a {@link ProcessSession}, which&#10;  can be used for accessing FlowFiles, etc.&#10; &#10;  @throws ProcessException if processing did not complete normally though&#10;  indicates the problem is an understood potential outcome of processing.&#10;  The controller/caller will handle these exceptions gracefully such as&#10;  logging, etc.. If another type of exception is allowed to propagate the&#10;  controller may no longer trigger this processor to operate, as this would&#10;  indicate a probable coding defect.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1684153142 { 
   	label=StandardLogRepository
	labeljust=l
	fillcolor=white
	style=filled
   
   StandardLogRepository1292167443XXXaddLogMessage1690274905[
	label="+ addLogMessage()"
	style=filled
	fillcolor=white
	tooltip="StandardLogRepository

null"
	fontcolor=darkgreen
];

StandardLogRepository1292167443XXXaddLogMessage936633774[
	label="+ addLogMessage()"
	style=filled
	fillcolor=white
	tooltip="StandardLogRepository

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1708012223 { 
   	label=CapturingLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   CapturingLogger306090332XXXdebug1506910935[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="CapturingLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1760597291 { 
   	label=AbstractHadoopProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractHadoopProcessor413313672XXXabstractOnStopped0[
	label="+ abstractOnStopped()"
	style=filled
	fillcolor=white
	tooltip="AbstractHadoopProcessor

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_1889377469 { 
   	label=MockProcessSession
	labeljust=l
	fillcolor=white
	style=filled
   
   MockProcessSession306090332XXXread199736687[
	label="+ read()"
	style=filled
	fillcolor=white
	tooltip="MockProcessSession

&#10;  Executes the given callback against the contents corresponding to the&#10;  given FlowFile.&#10; &#10;  @param source flowfile to retrieve content of&#10;  @param reader that will be called to read the flowfile content&#10;  @throws IllegalStateException if detected that this method is being&#10;  called from within a write callback of another method (i.e., from within the callback&#10;  that is passed to {@link #write(FlowFile, OutputStreamCallback)} or {@link #write(FlowFile, StreamCallback)})&#10;  or has an OutputStream open (via a call to {@link #write(FlowFile)}) in this session and for&#10;  the given FlowFile(s). Said another way, it is not permissible to call this method while writing to&#10;  the same FlowFile.&#10;  @throws FlowFileHandlingException if the given FlowFile is already&#10;  transferred or removed or doesn't belong to this session. Automatic&#10;  rollback will occur.&#10;  @throws MissingFlowFileException if the given FlowFile content cannot be&#10;  found. The FlowFile should no longer be referenced, will be internally&#10;  destroyed, and the session is automatically rolled back and what is left&#10;  of the FlowFile is destroyed.&#10;  @throws FlowFileAccessException if some IO problem occurs accessing&#10;  FlowFile content; if an attempt is made to access the InputStream&#10;  provided to the given InputStreamCallback after this method completed its&#10;  execution&#10; "
	fontcolor=darkgreen
];

MockProcessSession306090332XXXread661097743[
	label="+ read()"
	style=filled
	fillcolor=white
	tooltip="MockProcessSession

&#10;  Executes the given callback against the contents corresponding to the&#10;  given FlowFile.&#10; &#10;  \<i\>Note\</i\>: The OutputStream provided to the given OutputStreamCallback&#10;  will not be accessible once this method has completed its execution.&#10; &#10;  @param source flowfile to retrieve content of&#10;  @param allowSessionStreamManagement allow session to hold the stream open for performance reasons&#10;  @param reader that will be called to read the flowfile content&#10;  @throws IllegalStateException if detected that this method is being&#10;  called from within a write callback of another method (i.e., from within the callback&#10;  that is passed to {@link #write(FlowFile, OutputStreamCallback)} or {@link #write(FlowFile, StreamCallback)})&#10;  or has an OutputStream open (via a call to {@link #write(FlowFile)}) in this session and for&#10;  the given FlowFile(s). Said another way, it is not permissible to call this method while writing to&#10;  the same FlowFile.&#10;  @throws FlowFileHandlingException if the given FlowFile is already&#10;  transferred or removed or doesn't belong to this session. Automatic&#10;  rollback will occur.&#10;  @throws MissingFlowFileException if the given FlowFile content cannot be&#10;  found. The FlowFile should no longer be reference, will be internally&#10;  destroyed, and the session is automatically rolled back and what is left&#10;  of the FlowFile is destroyed.&#10;  @throws FlowFileAccessException if some IO problem occurs accessing&#10;  FlowFile content; if an attempt is made to access the InputStream&#10;  provided to the given InputStreamCallback after this method completed its&#10;  execution&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1921211216 { 
   	label=ComponentLog
	labeljust=l
	fillcolor=white
	style=filled
   
   ComponentLog978875333XXXwarn424332965[
	label="+ warn()"
	style=filled
	fillcolor=white
	tooltip="ComponentLog

null"
	penwidth=4
	fontcolor=darkgreen
];
} 

subgraph cluster_1944639365 { 
   	label=AbstractSNMPProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractSNMPProcessor777010377XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="AbstractSNMPProcessor

&#10;  Will close current SNMP mapping.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1968321111 { 
   	label=AbstractActionHandlerService
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractActionHandlerService1756063142XXXexecute1282825552[
	label="+ execute()"
	style=filled
	fillcolor=white
	tooltip="AbstractActionHandlerService

&#10;  Execute the given action for the provided facts&#10;  @param action The action that should be performed by the handler&#10;  @param facts The facts that triggered this action&#10; "
	fontcolor=darkgreen
];

AbstractActionHandlerService1756063142XXXexecute213004546[
	label="+ execute()"
	style=filled
	fillcolor=white
	tooltip="AbstractActionHandlerService

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2041829437 { 
   	label=ConsumeKafkaRecord_0_11
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_0_111914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_0_11

null"
	fontcolor=darkgreen
];

ConsumeKafkaRecord_0_111914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_0_11

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2041829438 { 
   	label=ConsumeKafkaRecord_0_10
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafkaRecord_0_101914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_0_10

null"
	fontcolor=darkgreen
];

ConsumeKafkaRecord_0_101914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafkaRecord_0_10

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2048858659 { 
   	label=MockComponentLog
	labeljust=l
	fillcolor=white
	style=filled
   
   MockComponentLog306090332XXXdebug424332965[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLog

null"
	fontcolor=darkgreen
];

MockComponentLog306090332XXXwarn424332965[
	label="+ warn()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLog

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2055742236 { 
   	label=HighThroughputSession
	labeljust=l
	fillcolor=white
	style=filled
   
   HighThroughputSession1899870488XXXread661097743[
	label="+ read()"
	style=filled
	fillcolor=white
	tooltip="HighThroughputSession

&#10;  Executes the given callback against the contents corresponding to the&#10;  given FlowFile.&#10; &#10;  \<i\>Note\</i\>: The OutputStream provided to the given OutputStreamCallback&#10;  will not be accessible once this method has completed its execution.&#10; &#10;  @param source flowfile to retrieve content of&#10;  @param allowSessionStreamManagement allow session to hold the stream open for performance reasons&#10;  @param reader that will be called to read the flowfile content&#10;  @throws IllegalStateException if detected that this method is being&#10;  called from within a write callback of another method (i.e., from within the callback&#10;  that is passed to {@link #write(FlowFile, OutputStreamCallback)} or {@link #write(FlowFile, StreamCallback)})&#10;  or has an OutputStream open (via a call to {@link #write(FlowFile)}) in this session and for&#10;  the given FlowFile(s). Said another way, it is not permissible to call this method while writing to&#10;  the same FlowFile.&#10;  @throws FlowFileHandlingException if the given FlowFile is already&#10;  transferred or removed or doesn't belong to this session. Automatic&#10;  rollback will occur.&#10;  @throws MissingFlowFileException if the given FlowFile content cannot be&#10;  found. The FlowFile should no longer be reference, will be internally&#10;  destroyed, and the session is automatically rolled back and what is left&#10;  of the FlowFile is destroyed.&#10;  @throws FlowFileAccessException if some IO problem occurs accessing&#10;  FlowFile content; if an attempt is made to access the InputStream&#10;  provided to the given InputStreamCallback after this method completed its&#10;  execution&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_2064957708 { 
   	label=ConsumerLease
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumerLease1914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumerLease

&#10;  Abstract method that is intended to be extended by the pool that created&#10;  this ConsumerLease object. It should ensure that the session given to&#10;  create this session is rolled back and that the underlying kafka consumer&#10;  is either returned to the pool for continued use or destroyed if this&#10;  lease has been poisoned. It can only be called once. Calling it more than&#10;  once can result in undefined and non threadsafe behavior.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_2088418441 { 
   	label=GetHDFS
	labeljust=l
	fillcolor=white
	style=filled
   
   GetHDFS413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetHDFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2095719686 { 
   	label=GetHDFSEvents
	labeljust=l
	fillcolor=white
	style=filled
   
   GetHDFSEvents1841802628XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetHDFSEvents

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2130543955 { 
   	label=ListenUDPRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   ListenUDPRecord470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ListenUDPRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_2137138951 { 
   	label=QueryNiFiReportingTask
	labeljust=l
	fillcolor=white
	style=filled
   
   QueryNiFiReportingTask864807412XXXonTrigger602840001[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="QueryNiFiReportingTask

&#10;  This method is called on a scheduled interval to allow the Reporting Task&#10;  to perform its tasks.&#10; &#10;  @param context reporting context&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_2139277237 { 
   	label=StatelessSchedulingAgent
	labeljust=l
	fillcolor=white
	style=filled
   
   StatelessSchedulingAgent395280032XXXschedule1008577232[
	label="+ schedule()"
	style=filled
	fillcolor=white
	tooltip="StatelessSchedulingAgent

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_219057026 { 
   	label=TerminationAwareLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   TerminationAwareLogger1158014602XXXdebug424332965[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="TerminationAwareLogger

null"
	fontcolor=darkgreen
];

TerminationAwareLogger1158014602XXXwarn424332965[
	label="+ warn()"
	style=filled
	fillcolor=white
	tooltip="TerminationAwareLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_220396826 { 
   	label=ActionHandlerLookup
	labeljust=l
	fillcolor=white
	style=filled
   
   ActionHandlerLookup1756063142XXXexecute1282825552[
	label="+ execute()"
	style=filled
	fillcolor=white
	tooltip="ActionHandlerLookup

null"
	fontcolor=darkgreen
];

ActionHandlerLookup1756063142XXXexecute213004546[
	label="+ execute()"
	style=filled
	fillcolor=white
	tooltip="ActionHandlerLookup

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_225154716 { 
   	label=ConvertJSONToAvro
	labeljust=l
	fillcolor=white
	style=filled
   
   ConvertJSONToAvro1617542754XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConvertJSONToAvro

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_260916734 { 
   	label=RecordBin
	labeljust=l
	fillcolor=white
	style=filled
   
   RecordBin1095578650XXXcomplete1808118735[
	label="+ complete()"
	style=filled
	fillcolor=white
	tooltip="RecordBin

null"
	fontcolor=darkgreen
];

RecordBin1095578650XXXrollback0[
	label="+ rollback()"
	style=filled
	fillcolor=white
	tooltip="RecordBin

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_292250563 { 
   	label=ListHDFS
	labeljust=l
	fillcolor=white
	style=filled
   
   ListHDFS413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ListHDFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_310143485 { 
   	label=PutHive3Streaming
	labeljust=l
	fillcolor=white
	style=filled
   
   PutHive3Streaming1617453443XXXcleanup0[
	label="+ cleanup()"
	style=filled
	fillcolor=white
	tooltip="PutHive3Streaming

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_317046079 { 
   	label=GetFileTransfer
	labeljust=l
	fillcolor=white
	style=filled
   
   GetFileTransfer470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetFileTransfer

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_359072123 { 
   	label=QueryRecord
	labeljust=l
	fillcolor=white
	style=filled
   
   QueryRecord470851760XXXcleanup0[
	label="+ cleanup()"
	style=filled
	fillcolor=white
	tooltip="QueryRecord

null"
	fontcolor=darkgreen
];

QueryRecord470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="QueryRecord

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_395991849 { 
   	label=SpringContextProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   SpringContextProcessor2034349287XXXcloseSpringContext135384992[
	label="+ closeSpringContext()"
	style=filled
	fillcolor=white
	tooltip="SpringContextProcessor

&#10;  Will close the 'exchanger' which in turn will close both Spring&#10;  Application Context and the ClassLoader that loaded it allowing new&#10;  instance of Spring Application Context to be created upon the next start&#10;  (which may have an updated classpath and functionality) without&#10;  restarting NiFi.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_456088823 { 
   	label=UDPStreamConsumer
	labeljust=l
	fillcolor=white
	style=filled
   
   UDPStreamConsumer518595616XXXprocess0[
	label="+ process()"
	style=filled
	fillcolor=white
	tooltip="UDPStreamConsumer

&#10;  Will be called by the thread that executes the consumption of data. May&#10;  be called many times though once \<code\>isConsumerFinished\</code\> returns&#10;  true this method will likely do nothing.&#10; &#10;  @throws java.io.IOException if there is an issue processing&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_492547111 { 
   	label=MockComponentLogger
	labeljust=l
	fillcolor=white
	style=filled
   
   MockComponentLogger305847012XXXdebug424332965[
	label="+ debug()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLogger

null"
	fontcolor=darkgreen
];

MockComponentLogger305847012XXXwarn424332965[
	label="+ warn()"
	style=filled
	fillcolor=white
	tooltip="MockComponentLogger

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_50447950 { 
   	label=GetHBase
	labeljust=l
	fillcolor=white
	style=filled
   
   GetHBase886316319XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="GetHBase

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_534103421 { 
   	label=ConsumeKafka_1_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_1_01914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_1_0

null"
	fontcolor=darkgreen
];

ConsumeKafka_1_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_1_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_534104382 { 
   	label=ConsumeKafka_2_0
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_2_01914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_2_0

null"
	fontcolor=darkgreen
];

ConsumeKafka_2_01914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_2_0

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_534104388 { 
   	label=ConsumeKafka_2_6
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_2_61914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_2_6

null"
	fontcolor=darkgreen
];

ConsumeKafka_2_61914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_2_6

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_579097682 { 
   	label=PutRiemann
	labeljust=l
	fillcolor=white
	style=filled
   
   PutRiemann587164015XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="PutRiemann

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_622692844 { 
   	label=ConsumeKafka_0_11
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_0_111914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_0_11

null"
	fontcolor=darkgreen
];

ConsumeKafka_0_111914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_0_11

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_622692845 { 
   	label=ConsumeKafka_0_10
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka_0_101914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_0_10

null"
	fontcolor=darkgreen
];

ConsumeKafka_0_101914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka_0_10

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_641209847 { 
   	label=AvroMerge
	labeljust=l
	fillcolor=white
	style=filled
   
   AvroMerge231340831XXXmerge1194193339[
	label="+ merge()"
	style=filled
	fillcolor=white
	tooltip="AvroMerge

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_668160713 { 
   	label=ExecuteGroovyScript
	labeljust=l
	fillcolor=white
	style=filled
   
   ExecuteGroovyScript318464201XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ExecuteGroovyScript

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_669466463 { 
   	label=AbstractAMQPProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractAMQPProcessor1483774730XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="AbstractAMQPProcessor

&#10;  Will builds target resource ({@link AMQPPublisher} or {@link AMQPConsumer}) upon first invocation and will delegate to the&#10;  implementation of {@link #processResource} method for further processing.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_743125858 { 
   	label=WrappedMessageProducer
	labeljust=l
	fillcolor=white
	style=filled
   
   WrappedMessageProducer518595616XXXclose334830297[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="WrappedMessageProducer

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_797583082 { 
   	label=TailFile
	labeljust=l
	fillcolor=white
	style=filled
   
   TailFile470851760XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="TailFile

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_79856970 { 
   	label=DeleteHDFS
	labeljust=l
	fillcolor=white
	style=filled
   
   DeleteHDFS413313672XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="DeleteHDFS

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_833282584 { 
   	label=AbstractListProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractListProcessor1549696020XXXlistByTimeWindow1421322213[
	label="+ listByTimeWindow()"
	style=filled
	fillcolor=white
	tooltip="AbstractListProcessor

null"
	fontcolor=darkgreen
];

AbstractListProcessor1549696020XXXlistByTrackingTimestamps1421322213[
	label="+ listByTrackingTimestamps()"
	style=filled
	fillcolor=white
	tooltip="AbstractListProcessor

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_849539721 { 
   	label=EventProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   EventProcessor710709873XXXonEvents957688971[
	label="+ onEvents()"
	style=filled
	fillcolor=white
	tooltip="EventProcessor

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_897766334 { 
   	label=ConsumerPool
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumerPool1914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumerPool

&#10;  Closes all consumers in the pool. Can be safely called repeatedly.&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_912986426 { 
   	label=ProcessSessionWrap
	labeljust=l
	fillcolor=white
	style=filled
   
   ProcessSessionWrap1218020741XXXread661097743[
	label="+ read()"
	style=filled
	fillcolor=white
	tooltip="ProcessSessionWrap

&#10;  Executes the given callback against the contents corresponding to the&#10;  given FlowFile.&#10;  \<p\>&#10;  \<i\>Note\</i\>: The OutputStream provided to the given OutputStreamCallback&#10;  will not be accessible once this method has completed its execution.&#10; &#10;  @param flowFile flow file to retrieve content of&#10;  @param allowSessionStreamManagement allow session to hold the stream open for performance reasons&#10;  @param reader that will be called to read the flow file content&#10;  @throws IllegalStateException if detected that this method is being called from within a callback of another method in this session and for the given FlowFile(s)&#10;  @throws FlowFileHandlingException if the given FlowFile is already transferred or removed or doesn't belong to this session. Automatic rollback will occur.&#10;  @throws MissingFlowFileException if the given FlowFile content cannot be found. The FlowFile should no longer be reference, will be internally destroyed, and the session is automatically&#10; rolled back and what is left of the FlowFile is destroyed.&#10;  @throws FlowFileAccessException if some IO problem occurs accessing FlowFile content; if an attempt is made to access the InputStream provided to the given InputStreamCallback after this&#10; method completed its execution&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_928489541 { 
   	label=ScriptedActionHandler
	labeljust=l
	fillcolor=white
	style=filled
   
   ScriptedActionHandler2020056353XXXexecute1282825552[
	label="+ execute()"
	style=filled
	fillcolor=white
	tooltip="ScriptedActionHandler

&#10;  Execute the given action for the provided facts&#10;  @param action The action that should be performed by the handler&#10;  @param facts The facts that triggered this action&#10; "
	fontcolor=darkgreen
];

ScriptedActionHandler2020056353XXXexecute213004546[
	label="+ execute()"
	style=filled
	fillcolor=white
	tooltip="ScriptedActionHandler

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_933285990 { 
   	label=ConsumeKafka
	labeljust=l
	fillcolor=white
	style=filled
   
   ConsumeKafka1914862338XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka

null"
	fontcolor=darkgreen
];

ConsumeKafka1914862338XXXonTrigger1421322213[
	label="+ onTrigger()"
	style=filled
	fillcolor=white
	tooltip="ConsumeKafka

null"
	fontcolor=darkgreen
];
} 

subgraph cluster_937264557 { 
   	label=ProcessStreamWriterCallback
	labeljust=l
	fillcolor=white
	style=filled
   
   ProcessStreamWriterCallback717429300XXXprocess1361886154[
	label="+ process()"
	style=filled
	fillcolor=white
	tooltip="ProcessStreamWriterCallback

&#10;  Provides a managed input stream for use. The input stream is&#10;  automatically opened and closed though it is ok to close the stream&#10;  manually.&#10; &#10;  @param in the stream to read bytes from&#10;  @throws IOException if issues reading from the underlying stream&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_957990128 { 
   	label=AbstractPutEventProcessor
	labeljust=l
	fillcolor=white
	style=filled
   
   AbstractPutEventProcessor1712562393XXXcloseSenders0[
	label="+ closeSenders()"
	style=filled
	fillcolor=white
	tooltip="AbstractPutEventProcessor

null"
	fontcolor=darkgreen
];
} 
} 
} 

'edges    
AbstractAMQPProcessor1483774730XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
AbstractActionHandlerService1756063142XXXexecute1282825552 -> ComponentLog978875333XXXwarn424332965;
AbstractActionHandlerService1756063142XXXexecute213004546 -> ActionHandlerLookup1756063142XXXexecute213004546;
AbstractActionHandlerService1756063142XXXexecute213004546 -> ComponentLog978875333XXXwarn424332965;
AbstractHadoopProcessor413313672XXXabstractOnStopped0 -> ComponentLog978875333XXXwarn424332965;
AbstractKafkaProcessor1396033677XXXclose0 -> ComponentLog978875333XXXwarn424332965;
AbstractListProcessor1549696020XXXlistByTimeWindow1421322213 -> ComponentLog978875333XXXwarn424332965;
AbstractListProcessor1549696020XXXlistByTrackingTimestamps1421322213 -> ComponentLog978875333XXXwarn424332965;
AbstractProcessor786985848XXXonTrigger1421322213 -> AbstractAMQPProcessor1483774730XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ConvertAvroSchema1617542754XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ConvertJSONToAvro1617542754XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> DeleteHDFS413313672XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> ExecuteGroovyScript318464201XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> GetHBase886316319XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> GetHDFSEvents1841802628XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> GetKafka1396033677XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger1421322213 -> PutDatabaseRecord470851760XXXonTrigger1421322213;
AbstractProcessor786985848XXXonTrigger302525551 -> AbstractProcessor786985848XXXonTrigger1421322213;
AbstractPutEventProcessor1712562393XXXcloseSenders0 -> ComponentLog978875333XXXwarn424332965;
AbstractSNMPProcessor777010377XXXclose0 -> ComponentLog978875333XXXwarn424332965;
ActionHandlerLookup1756063142XXXexecute1282825552 -> ActionHandlerLookup1756063142XXXexecute213004546;
ActionHandlerLookup1756063142XXXexecute213004546 -> AbstractActionHandlerService1756063142XXXexecute213004546;
AvroMerge231340831XXXmerge1194193339 -> MockProcessSession306090332XXXread661097743;
BinaryConcatenationMerge231340831XXXmerge1194193339 -> MockProcessSession306090332XXXread661097743;
CaptureChangeMySQL485385363XXXonPrimaryNodeChange193556499 -> ComponentLog978875333XXXwarn424332965;
CaptureChangeMySQL485385363XXXonStopped135384992 -> ComponentLog978875333XXXwarn424332965;
CaptureChangeMySQL485385363XXXonTrigger302525551 -> ComponentLog978875333XXXwarn424332965;
ComponentLog978875333XXXwarn424332965 -> MockComponentLog306090332XXXwarn424332965;
ComponentLog978875333XXXwarn424332965 -> MockComponentLogger305847012XXXwarn424332965;
ComponentLog978875333XXXwarn424332965 -> NopComponentLog832281502XXXwarn424332965;
ComponentLog978875333XXXwarn424332965 -> SimpleProcessLogger786985848XXXwarn424332965;
ComponentLog978875333XXXwarn424332965 -> TerminationAwareLogger1158014602XXXwarn424332965;
ConsumeKafka1914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka1914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafkaRecord_0_101914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafkaRecord_0_101914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafkaRecord_0_111914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafkaRecord_0_111914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafkaRecord_1_01914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafkaRecord_1_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafkaRecord_2_01914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafkaRecord_2_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafkaRecord_2_01914862338XXXonTrigger1421322213 -> ConsumerPool1914862338XXXclose0;
ConsumeKafkaRecord_2_61914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafkaRecord_2_61914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafkaRecord_2_61914862338XXXonTrigger1421322213 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka_0_101914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka_0_101914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafka_0_111914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka_0_111914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafka_1_01914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka_1_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafka_2_01914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka_2_01914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafka_2_01914862338XXXonTrigger1421322213 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka_2_61914862338XXXclose0 -> ConsumerPool1914862338XXXclose0;
ConsumeKafka_2_61914862338XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumeKafka_2_61914862338XXXonTrigger1421322213 -> ConsumerPool1914862338XXXclose0;
ConsumeMQTT1617610039XXXonStopped135384992 -> ComponentLog978875333XXXwarn424332965;
ConsumeMQTT1617610039XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConsumerLease1914862338XXXclose0 -> SimpleConsumerLease897766334XXXclose0;
ConsumerPool1914862338XXXclose0 -> SimpleConsumerLease897766334XXXclose64711720;
ConvertAvroSchema1617542754XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ConvertJSONToAvro1617542754XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
DeleteHDFS413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
EventProcessor710709873XXXonEvents957688971 -> ComponentLog978875333XXXwarn424332965;
ExecuteGroovyScript318464201XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
FlowFileEnumerator212020097XXXclose0 -> ComponentLog978875333XXXwarn424332965;
FlowFileEnumerator212020097XXXreset0 -> ComponentLog978875333XXXwarn424332965;
FlowFileStreamMerger231340831XXXmerge1194193339 -> MockProcessSession306090332XXXread661097743;
GetFileTransfer470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
GetHBase886316319XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
GetHDFS413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
GetHDFSEvents1841802628XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
GetKafka1396033677XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
GetSplunk84296138XXXonScheduled135384992 -> ComponentLog978875333XXXwarn424332965;
GetTCP437767650XXXonTrigger302525551 -> ComponentLog978875333XXXwarn424332965;
GetTCP437767650XXXtearDown0 -> ComponentLog978875333XXXwarn424332965;
HandleHttpRequest470851760XXXonPrimaryNodeChange193556499 -> ComponentLog978875333XXXwarn424332965;
HighThroughputSession1899870488XXXread661097743 -> StandardProcessSession1624409406XXXread661097743;
JMSConsumer80226329XXXconsume385240460 -> ComponentLog978875333XXXwarn424332965;
ListHDFS413313672XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
ListenHTTP470851760XXXonPrimaryNodeChange193556499 -> ComponentLog978875333XXXwarn424332965;
ListenUDPRecord470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
MetricsEventReportingTask864807412XXXonTrigger602840001 -> MetricsSqlQueryService864807412XXXcloseQuietly698239307;
MetricsSqlQueryService864807412XXXcloseQuietly698239307 -> ComponentLog978875333XXXwarn424332965;
MockComponentLog306090332XXXdebug424332965 -> CapturingLogger306090332XXXdebug1506910935;
MockProcessSession306090332XXXread199736687 -> MockProcessSession306090332XXXread661097743;
MockProcessSession306090332XXXread661097743 -> ProcessStreamWriterCallback717429300XXXprocess1361886154;
ProcessSessionWrap1218020741XXXread661097743 -> MockProcessSession306090332XXXread661097743;
ProcessStreamWriterCallback717429300XXXprocess1361886154 -> ComponentLog978875333XXXwarn424332965;
PutDatabaseRecord470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
PutHive3Streaming1617453443XXXcleanup0 -> ComponentLog978875333XXXwarn424332965;
PutHiveStreaming1617453443XXXcleanup0 -> ComponentLog978875333XXXwarn424332965;
PutHiveStreaming1617453443XXXonTrigger302525551 -> ComponentLog978875333XXXwarn424332965;
PutRiemann587164015XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
PutSplunk84296138XXXonTrigger302525551 -> ComponentLog978875333XXXwarn424332965;
PutTCP470851760XXXonTrigger302525551 -> ComponentLog978875333XXXwarn424332965;
PutUDP470851760XXXonTrigger302525551 -> ComponentLog978875333XXXwarn424332965;
QueryNiFiReportingTask864807412XXXonTrigger602840001 -> MetricsSqlQueryService864807412XXXcloseQuietly698239307;
QueryRecord470851760XXXcleanup0 -> ComponentLog978875333XXXwarn424332965;
QueryRecord470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
RecordBin1095578650XXXcomplete1808118735 -> ComponentLog978875333XXXwarn424332965;
RecordBin1095578650XXXrollback0 -> ComponentLog978875333XXXwarn424332965;
ReportingTaskWrapper1248989462XXXrun0 -> MetricsEventReportingTask864807412XXXonTrigger602840001;
ScriptedActionHandler2020056353XXXexecute1282825552 -> AbstractActionHandlerService1756063142XXXexecute1282825552;
ScriptedActionHandler2020056353XXXexecute213004546 -> ScriptedActionHandler2020056353XXXexecute1282825552;
SimpleConsumerLease897766334XXXclose0 -> SimpleConsumerLease897766334XXXclose64711720;
SimpleConsumerLease897766334XXXclose64711720 -> ComponentLog978875333XXXwarn424332965;
SimpleProcessLogger786985848XXXwarn424332965 -> StandardLogRepository1292167443XXXaddLogMessage936633774;
SpringContextProcessor2034349287XXXcloseSpringContext135384992 -> ComponentLog978875333XXXwarn424332965;
StandardLogRepository1292167443XXXaddLogMessage936633774 -> StandardLogRepository1292167443XXXaddLogMessage1690274905;
StandardProcessSession1624409406XXXread199736687 -> StandardProcessSession1624409406XXXread661097743;
StandardProcessSession1624409406XXXread661097743 -> ProcessStreamWriterCallback717429300XXXprocess1361886154;
StatelessSchedulingAgent395280032XXXschedule1008577232 -> MetricsEventReportingTask864807412XXXonTrigger602840001;
TailFile470851760XXXonTrigger1421322213 -> ComponentLog978875333XXXwarn424332965;
TerminationAwareLogger1158014602XXXwarn424332965 -> ComponentLog978875333XXXwarn424332965;
TerminationAwareLogger1158014602XXXwarn424332965 -> MockComponentLog306090332XXXdebug424332965;
TerminationAwareLogger1158014602XXXwarn424332965 -> MockComponentLogger305847012XXXdebug424332965;
TerminationAwareLogger1158014602XXXwarn424332965 -> NopComponentLog832281502XXXdebug424332965;
TerminationAwareLogger1158014602XXXwarn424332965 -> SimpleProcessLogger786985848XXXdebug424332965;
TerminationAwareLogger1158014602XXXwarn424332965 -> TerminationAwareLogger1158014602XXXdebug424332965;
UDPStreamConsumer518595616XXXprocess0 -> ComponentLog978875333XXXwarn424332965;
WrappedMessageConsumer518595616XXXclose334830297 -> ComponentLog978875333XXXwarn424332965;
WrappedMessageProducer518595616XXXclose334830297 -> ComponentLog978875333XXXwarn424332965;
    
}
@enduml